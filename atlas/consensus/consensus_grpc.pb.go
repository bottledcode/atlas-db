// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusClient interface {
	ProposeTopologyChange(ctx context.Context, in *ProposeTopologyChangeRequest, opts ...grpc.CallOption) (*PromiseTopologyChange, error)
	AcceptTopologyChange(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
}

type consensusClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusClient(cc grpc.ClientConnInterface) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) ProposeTopologyChange(ctx context.Context, in *ProposeTopologyChangeRequest, opts ...grpc.CallOption) (*PromiseTopologyChange, error) {
	out := new(PromiseTopologyChange)
	err := c.cc.Invoke(ctx, "/atlas.consensus.Consensus/ProposeTopologyChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) AcceptTopologyChange(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/atlas.consensus.Consensus/AcceptTopologyChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServer is the server API for Consensus service.
// All implementations must embed UnimplementedConsensusServer
// for forward compatibility
type ConsensusServer interface {
	ProposeTopologyChange(context.Context, *ProposeTopologyChangeRequest) (*PromiseTopologyChange, error)
	AcceptTopologyChange(context.Context, *Node) (*Node, error)
	mustEmbedUnimplementedConsensusServer()
}

// UnimplementedConsensusServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (UnimplementedConsensusServer) ProposeTopologyChange(context.Context, *ProposeTopologyChangeRequest) (*PromiseTopologyChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeTopologyChange not implemented")
}
func (UnimplementedConsensusServer) AcceptTopologyChange(context.Context, *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTopologyChange not implemented")
}
func (UnimplementedConsensusServer) mustEmbedUnimplementedConsensusServer() {}

// UnsafeConsensusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServer will
// result in compilation errors.
type UnsafeConsensusServer interface {
	mustEmbedUnimplementedConsensusServer()
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_ProposeTopologyChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeTopologyChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).ProposeTopologyChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.consensus.Consensus/ProposeTopologyChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).ProposeTopologyChange(ctx, req.(*ProposeTopologyChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_AcceptTopologyChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).AcceptTopologyChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.consensus.Consensus/AcceptTopologyChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).AcceptTopologyChange(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atlas.consensus.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeTopologyChange",
			Handler:    _Consensus_ProposeTopologyChange_Handler,
		},
		{
			MethodName: "AcceptTopologyChange",
			Handler:    _Consensus_AcceptTopologyChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consensus/consensus.proto",
}
