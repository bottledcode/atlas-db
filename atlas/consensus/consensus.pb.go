//
// This file is part of Atlas-DB.
//
// Atlas-DB is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// Atlas-DB is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Atlas-DB. If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: consensus/consensus.proto

package consensus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplicationLevel int32

const (
	ReplicationLevel_global   ReplicationLevel = 0 // Replicate the table globally
	ReplicationLevel_regional ReplicationLevel = 1 // Replicate the table within the region
	ReplicationLevel_local    ReplicationLevel = 2 // Replicate the table within the node
)

// Enum value maps for ReplicationLevel.
var (
	ReplicationLevel_name = map[int32]string{
		0: "global",
		1: "regional",
		2: "local",
	}
	ReplicationLevel_value = map[string]int32{
		"global":   0,
		"regional": 1,
		"local":    2,
	}
)

func (x ReplicationLevel) Enum() *ReplicationLevel {
	p := new(ReplicationLevel)
	*p = x
	return p
}

func (x ReplicationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[0].Descriptor()
}

func (ReplicationLevel) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[0]
}

func (x ReplicationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicationLevel.Descriptor instead.
func (ReplicationLevel) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

type TableType int32

const (
	TableType_table   TableType = 0 // The table is a regular table
	TableType_group   TableType = 1 // The table is a group meta table
	TableType_trigger TableType = 2 // The table is a trigger
	TableType_view    TableType = 3 // The table is a view
	TableType_sharded TableType = 4 // The table is sharded
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		0: "table",
		1: "group",
		2: "trigger",
		3: "view",
		4: "sharded",
	}
	TableType_value = map[string]int32{
		"table":   0,
		"group":   1,
		"trigger": 2,
		"view":    3,
		"sharded": 4,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[1].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[1]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

type StealReason int32

const (
	StealReason_queryReason     StealReason = 0 // The table was stolen due to a readonly
	StealReason_writeReason     StealReason = 1 // The table was stolen due to a write
	StealReason_discoveryReason StealReason = 2 // We only care about this for discovery
)

// Enum value maps for StealReason.
var (
	StealReason_name = map[int32]string{
		0: "queryReason",
		1: "writeReason",
		2: "discoveryReason",
	}
	StealReason_value = map[string]int32{
		"queryReason":     0,
		"writeReason":     1,
		"discoveryReason": 2,
	}
)

func (x StealReason) Enum() *StealReason {
	p := new(StealReason)
	*p = x
	return p
}

func (x StealReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StealReason) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[2].Descriptor()
}

func (StealReason) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[2]
}

func (x StealReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StealReason.Descriptor instead.
func (StealReason) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

type MigrationVersion struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TableVersion     int64                  `protobuf:"varint,1,opt,name=tableVersion,proto3" json:"tableVersion,omitempty"`         // The version of the table
	MigrationVersion int64                  `protobuf:"varint,2,opt,name=migrationVersion,proto3" json:"migrationVersion,omitempty"` // The version of the migration
	NodeId           int64                  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`                     // The ID of the node
	TableName        []byte                 `protobuf:"bytes,4,opt,name=tableName,proto3" json:"tableName,omitempty"`                // The name of the table
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MigrationVersion) Reset() {
	*x = MigrationVersion{}
	mi := &file_consensus_consensus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrationVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationVersion) ProtoMessage() {}

func (x *MigrationVersion) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationVersion.ProtoReflect.Descriptor instead.
func (*MigrationVersion) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *MigrationVersion) GetTableVersion() int64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *MigrationVersion) GetMigrationVersion() int64 {
	if x != nil {
		return x.MigrationVersion
	}
	return 0
}

func (x *MigrationVersion) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *MigrationVersion) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

type GossipMigration struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MigrationRequest  *Migration             `protobuf:"bytes,1,opt,name=migrationRequest,proto3" json:"migrationRequest,omitempty"`   // The migration to be gossiped
	Table             *Table                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`                         // The table the migration is for
	PreviousMigration *MigrationVersion      `protobuf:"bytes,3,opt,name=previousMigration,proto3" json:"previousMigration,omitempty"` // The previous migration
	Ttl               int64                  `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`                            // The time to live of the gossip
	Sender            *Node                  `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`                       // The node sending the gossip
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GossipMigration) Reset() {
	*x = GossipMigration{}
	mi := &file_consensus_consensus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GossipMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipMigration) ProtoMessage() {}

func (x *GossipMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipMigration.ProtoReflect.Descriptor instead.
func (*GossipMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *GossipMigration) GetMigrationRequest() *Migration {
	if x != nil {
		return x.MigrationRequest
	}
	return nil
}

func (x *GossipMigration) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GossipMigration) GetPreviousMigration() *MigrationVersion {
	if x != nil {
		return x.PreviousMigration
	}
	return nil
}

func (x *GossipMigration) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *GossipMigration) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

type JoinClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the operation was successful
	Table         *Table                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`      // The current node table if the requested node is not the owner
	NodeId        int64                  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`   // The ID of the newly joined node
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinClusterResponse) Reset() {
	*x = JoinClusterResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinClusterResponse) ProtoMessage() {}

func (x *JoinClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinClusterResponse.ProtoReflect.Descriptor instead.
func (*JoinClusterResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *JoinClusterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinClusterResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *JoinClusterResponse) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type SchemaMigration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commands      []string               `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"` // The commands to be executed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaMigration) Reset() {
	*x = SchemaMigration{}
	mi := &file_consensus_consensus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMigration) ProtoMessage() {}

func (x *SchemaMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMigration.ProtoReflect.Descriptor instead.
func (*SchemaMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *SchemaMigration) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type ACL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owners        *ACLData               `protobuf:"bytes,1,opt,name=owners,proto3" json:"owners,omitempty"`
	Readers       *ACLData               `protobuf:"bytes,2,opt,name=readers,proto3" json:"readers,omitempty"`
	Writers       *ACLData               `protobuf:"bytes,3,opt,name=writers,proto3" json:"writers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ACL) Reset() {
	*x = ACL{}
	mi := &file_consensus_consensus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *ACL) GetOwners() *ACLData {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *ACL) GetReaders() *ACLData {
	if x != nil {
		return x.Readers
	}
	return nil
}

func (x *ACL) GetWriters() *ACLData {
	if x != nil {
		return x.Writers
	}
	return nil
}

type DataReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataReference) Reset() {
	*x = DataReference{}
	mi := &file_consensus_consensus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataReference) ProtoMessage() {}

func (x *DataReference) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataReference.ProtoReflect.Descriptor instead.
func (*DataReference) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *DataReference) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DataReference) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*Record_Value
	//	*Record_Ref
	Data          isRecord_Data `protobuf_oneof:"data"`
	AccessControl *ACL          `protobuf:"bytes,2,opt,name=accessControl,proto3" json:"accessControl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_consensus_consensus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *Record) GetData() isRecord_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Record) GetValue() *RawData {
	if x != nil {
		if x, ok := x.Data.(*Record_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *Record) GetRef() *DataReference {
	if x != nil {
		if x, ok := x.Data.(*Record_Ref); ok {
			return x.Ref
		}
	}
	return nil
}

func (x *Record) GetAccessControl() *ACL {
	if x != nil {
		return x.AccessControl
	}
	return nil
}

type isRecord_Data interface {
	isRecord_Data()
}

type Record_Value struct {
	Value *RawData `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type Record_Ref struct {
	Ref *DataReference `protobuf:"bytes,3,opt,name=ref,proto3,oneof"`
}

func (*Record_Value) isRecord_Data() {}

func (*Record_Ref) isRecord_Data() {}

type RawData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawData) Reset() {
	*x = RawData{}
	mi := &file_consensus_consensus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawData) ProtoMessage() {}

func (x *RawData) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawData.ProtoReflect.Descriptor instead.
func (*RawData) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *RawData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data          *Record                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetChange) Reset() {
	*x = SetChange{}
	mi := &file_consensus_consensus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChange) ProtoMessage() {}

func (x *SetChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChange.ProtoReflect.Descriptor instead.
func (*SetChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *SetChange) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SetChange) GetData() *Record {
	if x != nil {
		return x.Data
	}
	return nil
}

type AclChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Key   []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to Change:
	//
	//	*AclChange_Addition
	//	*AclChange_Deletion
	Change        isAclChange_Change `protobuf_oneof:"change"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AclChange) Reset() {
	*x = AclChange{}
	mi := &file_consensus_consensus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclChange) ProtoMessage() {}

func (x *AclChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclChange.ProtoReflect.Descriptor instead.
func (*AclChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *AclChange) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AclChange) GetChange() isAclChange_Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *AclChange) GetAddition() *ACL {
	if x != nil {
		if x, ok := x.Change.(*AclChange_Addition); ok {
			return x.Addition
		}
	}
	return nil
}

func (x *AclChange) GetDeletion() *ACL {
	if x != nil {
		if x, ok := x.Change.(*AclChange_Deletion); ok {
			return x.Deletion
		}
	}
	return nil
}

type isAclChange_Change interface {
	isAclChange_Change()
}

type AclChange_Addition struct {
	Addition *ACL `protobuf:"bytes,2,opt,name=addition,proto3,oneof"`
}

type AclChange_Deletion struct {
	Deletion *ACL `protobuf:"bytes,3,opt,name=deletion,proto3,oneof"`
}

func (*AclChange_Addition) isAclChange_Change() {}

func (*AclChange_Deletion) isAclChange_Change() {}

type DelChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelChange) Reset() {
	*x = DelChange{}
	mi := &file_consensus_consensus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChange) ProtoMessage() {}

func (x *DelChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChange.ProtoReflect.Descriptor instead.
func (*DelChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{10}
}

func (x *DelChange) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type SubscriptionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscribe           `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Log           [][]byte               `protobuf:"bytes,2,rep,name=log,proto3" json:"log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionList) Reset() {
	*x = SubscriptionList{}
	mi := &file_consensus_consensus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionList) ProtoMessage() {}

func (x *SubscriptionList) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionList.ProtoReflect.Descriptor instead.
func (*SubscriptionList) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{11}
}

func (x *SubscriptionList) GetSubscriptions() []*Subscribe {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *SubscriptionList) GetLog() [][]byte {
	if x != nil {
		return x.Log
	}
	return nil
}

type SubscribeOptions struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Batch          bool                   `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	RetryAttempts  int32                  `protobuf:"zigzag32,2,opt,name=retryAttempts,proto3" json:"retryAttempts,omitempty"`
	RetryAfterBase *durationpb.Duration   `protobuf:"bytes,3,opt,name=retryAfterBase,proto3" json:"retryAfterBase,omitempty"`
	Auth           string                 `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeOptions) Reset() {
	*x = SubscribeOptions{}
	mi := &file_consensus_consensus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOptions) ProtoMessage() {}

func (x *SubscribeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOptions.ProtoReflect.Descriptor instead.
func (*SubscribeOptions) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribeOptions) GetBatch() bool {
	if x != nil {
		return x.Batch
	}
	return false
}

func (x *SubscribeOptions) GetRetryAttempts() int32 {
	if x != nil {
		return x.RetryAttempts
	}
	return 0
}

func (x *SubscribeOptions) GetRetryAfterBase() *durationpb.Duration {
	if x != nil {
		return x.RetryAfterBase
	}
	return nil
}

func (x *SubscribeOptions) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type Subscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Prefix        []byte                 `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Options       *SubscribeOptions      `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	mi := &file_consensus_consensus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{13}
}

func (x *Subscribe) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Subscribe) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Subscribe) GetOptions() *SubscribeOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Notify struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Key   []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to Change:
	//
	//	*Notify_Set
	//	*Notify_Del
	//	*Notify_Acl
	Change        isNotify_Change        `protobuf_oneof:"change"`
	Version       string                 `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ts,proto3" json:"ts,omitempty"`
	Origin        *Subscribe             `protobuf:"bytes,8,opt,name=origin,proto3" json:"origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notify) Reset() {
	*x = Notify{}
	mi := &file_consensus_consensus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{14}
}

func (x *Notify) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Notify) GetChange() isNotify_Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Notify) GetSet() *SetChange {
	if x != nil {
		if x, ok := x.Change.(*Notify_Set); ok {
			return x.Set
		}
	}
	return nil
}

func (x *Notify) GetDel() *DelChange {
	if x != nil {
		if x, ok := x.Change.(*Notify_Del); ok {
			return x.Del
		}
	}
	return nil
}

func (x *Notify) GetAcl() *AclChange {
	if x != nil {
		if x, ok := x.Change.(*Notify_Acl); ok {
			return x.Acl
		}
	}
	return nil
}

func (x *Notify) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Notify) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Notify) GetOrigin() *Subscribe {
	if x != nil {
		return x.Origin
	}
	return nil
}

type isNotify_Change interface {
	isNotify_Change()
}

type Notify_Set struct {
	Set *SetChange `protobuf:"bytes,3,opt,name=set,proto3,oneof"`
}

type Notify_Del struct {
	Del *DelChange `protobuf:"bytes,4,opt,name=del,proto3,oneof"`
}

type Notify_Acl struct {
	Acl *AclChange `protobuf:"bytes,5,opt,name=acl,proto3,oneof"`
}

func (*Notify_Set) isNotify_Change() {}

func (*Notify_Del) isNotify_Change() {}

func (*Notify_Acl) isNotify_Change() {}

type KVChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Operation:
	//
	//	*KVChange_Set
	//	*KVChange_Del
	//	*KVChange_Data
	//	*KVChange_Acl
	//	*KVChange_Sub
	//	*KVChange_Notify
	Operation     isKVChange_Operation `protobuf_oneof:"operation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KVChange) Reset() {
	*x = KVChange{}
	mi := &file_consensus_consensus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KVChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVChange) ProtoMessage() {}

func (x *KVChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVChange.ProtoReflect.Descriptor instead.
func (*KVChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{15}
}

func (x *KVChange) GetOperation() isKVChange_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *KVChange) GetSet() *SetChange {
	if x != nil {
		if x, ok := x.Operation.(*KVChange_Set); ok {
			return x.Set
		}
	}
	return nil
}

func (x *KVChange) GetDel() *DelChange {
	if x != nil {
		if x, ok := x.Operation.(*KVChange_Del); ok {
			return x.Del
		}
	}
	return nil
}

func (x *KVChange) GetData() *RawData {
	if x != nil {
		if x, ok := x.Operation.(*KVChange_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *KVChange) GetAcl() *AclChange {
	if x != nil {
		if x, ok := x.Operation.(*KVChange_Acl); ok {
			return x.Acl
		}
	}
	return nil
}

func (x *KVChange) GetSub() *Subscribe {
	if x != nil {
		if x, ok := x.Operation.(*KVChange_Sub); ok {
			return x.Sub
		}
	}
	return nil
}

func (x *KVChange) GetNotify() *Notify {
	if x != nil {
		if x, ok := x.Operation.(*KVChange_Notify); ok {
			return x.Notify
		}
	}
	return nil
}

type isKVChange_Operation interface {
	isKVChange_Operation()
}

type KVChange_Set struct {
	Set *SetChange `protobuf:"bytes,1,opt,name=set,proto3,oneof"`
}

type KVChange_Del struct {
	Del *DelChange `protobuf:"bytes,2,opt,name=del,proto3,oneof"`
}

type KVChange_Data struct {
	Data *RawData `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type KVChange_Acl struct {
	Acl *AclChange `protobuf:"bytes,4,opt,name=acl,proto3,oneof"`
}

type KVChange_Sub struct {
	Sub *Subscribe `protobuf:"bytes,5,opt,name=sub,proto3,oneof"`
}

type KVChange_Notify struct {
	Notify *Notify `protobuf:"bytes,6,opt,name=notify,proto3,oneof"`
}

func (*KVChange_Set) isKVChange_Operation() {}

func (*KVChange_Del) isKVChange_Operation() {}

func (*KVChange_Data) isKVChange_Operation() {}

func (*KVChange_Acl) isKVChange_Operation() {}

func (*KVChange_Sub) isKVChange_Operation() {}

func (*KVChange_Notify) isKVChange_Operation() {}

type DataMigration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Time  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to Session:
	//
	//	*DataMigration_Change
	Session       isDataMigration_Session `protobuf_oneof:"session"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataMigration) Reset() {
	*x = DataMigration{}
	mi := &file_consensus_consensus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMigration) ProtoMessage() {}

func (x *DataMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMigration.ProtoReflect.Descriptor instead.
func (*DataMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{16}
}

func (x *DataMigration) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DataMigration) GetSession() isDataMigration_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *DataMigration) GetChange() *KVChange {
	if x != nil {
		if x, ok := x.Session.(*DataMigration_Change); ok {
			return x.Change
		}
	}
	return nil
}

type isDataMigration_Session interface {
	isDataMigration_Session()
}

type DataMigration_Change struct {
	Change *KVChange `protobuf:"bytes,2,opt,name=change,proto3,oneof"`
}

func (*DataMigration_Change) isDataMigration_Session() {}

type NilMigration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NilMigration) Reset() {
	*x = NilMigration{}
	mi := &file_consensus_consensus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NilMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NilMigration) ProtoMessage() {}

func (x *NilMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NilMigration.ProtoReflect.Descriptor instead.
func (*NilMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{17}
}

type Migration struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Version *MigrationVersion      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // The version of the migration
	// Types that are valid to be assigned to Migration:
	//
	//	*Migration_Schema
	//	*Migration_Data
	//	*Migration_None
	Migration     isMigration_Migration `protobuf_oneof:"migration"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Migration) Reset() {
	*x = Migration{}
	mi := &file_consensus_consensus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Migration) ProtoMessage() {}

func (x *Migration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Migration.ProtoReflect.Descriptor instead.
func (*Migration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{18}
}

func (x *Migration) GetVersion() *MigrationVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Migration) GetMigration() isMigration_Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

func (x *Migration) GetSchema() *SchemaMigration {
	if x != nil {
		if x, ok := x.Migration.(*Migration_Schema); ok {
			return x.Schema
		}
	}
	return nil
}

func (x *Migration) GetData() *DataMigration {
	if x != nil {
		if x, ok := x.Migration.(*Migration_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *Migration) GetNone() *NilMigration {
	if x != nil {
		if x, ok := x.Migration.(*Migration_None); ok {
			return x.None
		}
	}
	return nil
}

type isMigration_Migration interface {
	isMigration_Migration()
}

type Migration_Schema struct {
	Schema *SchemaMigration `protobuf:"bytes,2,opt,name=schema,proto3,oneof"` // The schema migration
}

type Migration_Data struct {
	Data *DataMigration `protobuf:"bytes,3,opt,name=data,proto3,oneof"` // The data migration
}

type Migration_None struct {
	None *NilMigration `protobuf:"bytes,4,opt,name=none,proto3,oneof"` // Represents a read
}

func (*Migration_Schema) isMigration_Migration() {}

func (*Migration_Data) isMigration_Migration() {}

func (*Migration_None) isMigration_Migration() {}

type WriteMigrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`       // The node sending the migration
	Migration     *Migration             `protobuf:"bytes,2,opt,name=migration,proto3" json:"migration,omitempty"` // The migration to be written
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMigrationRequest) Reset() {
	*x = WriteMigrationRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationRequest) ProtoMessage() {}

func (x *WriteMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationRequest.ProtoReflect.Descriptor instead.
func (*WriteMigrationRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{19}
}

func (x *WriteMigrationRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *WriteMigrationRequest) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

type WriteMigrationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the operation was successful
	Table         *Table                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`      // The table if the operation was not successful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMigrationResponse) Reset() {
	*x = WriteMigrationResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationResponse) ProtoMessage() {}

func (x *WriteMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationResponse.ProtoReflect.Descriptor instead.
func (*WriteMigrationResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{20}
}

func (x *WriteMigrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WriteMigrationResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type Principal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // The name of the principal
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // The value of the principal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Principal) Reset() {
	*x = Principal{}
	mi := &file_consensus_consensus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Principal) ProtoMessage() {}

func (x *Principal) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Principal.ProtoReflect.Descriptor instead.
func (*Principal) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{21}
}

func (x *Principal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Principal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Shard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *Table                 `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`           // The table the shard belongs to
	Shard         *Table                 `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`           // The shard table
	Principals    []*Principal           `protobuf:"bytes,3,rep,name=principals,proto3" json:"principals,omitempty"` // The principals the shard is sharded by
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Shard) Reset() {
	*x = Shard{}
	mi := &file_consensus_consensus_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{22}
}

func (x *Shard) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Shard) GetShard() *Table {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *Shard) GetPrincipals() []*Principal {
	if x != nil {
		return x.Principals
	}
	return nil
}

type Table struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              []byte                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                // The name of the table
	ReplicationLevel  ReplicationLevel       `protobuf:"varint,2,opt,name=replicationLevel,proto3,enum=atlas.consensus.ReplicationLevel" json:"replicationLevel,omitempty"` // The replication level of the table
	Owner             *Node                  `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`                                                              // The global owner of the table
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                                                      // The time the table was created
	Version           int64                  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                                                         // The version of the table
	AllowedRegions    []string               `protobuf:"bytes,6,rep,name=allowedRegions,proto3" json:"allowedRegions,omitempty"`                                            // The regions the table data can be replicated to
	RestrictedRegions []string               `protobuf:"bytes,7,rep,name=restrictedRegions,proto3" json:"restrictedRegions,omitempty"`                                      // The regions the table data cannot be replicated to
	Group             string                 `protobuf:"bytes,9,opt,name=group,proto3" json:"group,omitempty"`                                                              // The group the table belongs to
	Type              TableType              `protobuf:"varint,10,opt,name=type,proto3,enum=atlas.consensus.TableType" json:"type,omitempty"`                               // The type of the table
	ShardPrincipals   []string               `protobuf:"bytes,11,rep,name=shardPrincipals,proto3" json:"shardPrincipals,omitempty"`                                         // The principals the table is sharded by
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_consensus_consensus_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{23}
}

func (x *Table) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Table) GetReplicationLevel() ReplicationLevel {
	if x != nil {
		return x.ReplicationLevel
	}
	return ReplicationLevel_global
}

func (x *Table) GetOwner() *Node {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Table) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Table) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Table) GetAllowedRegions() []string {
	if x != nil {
		return x.AllowedRegions
	}
	return nil
}

func (x *Table) GetRestrictedRegions() []string {
	if x != nil {
		return x.RestrictedRegions
	}
	return nil
}

func (x *Table) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Table) GetType() TableType {
	if x != nil {
		return x.Type
	}
	return TableType_table
}

func (x *Table) GetShardPrincipals() []string {
	if x != nil {
		return x.ShardPrincipals
	}
	return nil
}

type TableGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       *Table                 `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"` // The details of the group
	Tables        []*Table               `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`   // The tables in the group
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableGroup) Reset() {
	*x = TableGroup{}
	mi := &file_consensus_consensus_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableGroup) ProtoMessage() {}

func (x *TableGroup) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableGroup.ProtoReflect.Descriptor instead.
func (*TableGroup) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{24}
}

func (x *TableGroup) GetDetails() *Table {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TableGroup) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

type StealTableOwnershipFailure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *Table                 `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"` // The table that was not stolen
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StealTableOwnershipFailure) Reset() {
	*x = StealTableOwnershipFailure{}
	mi := &file_consensus_consensus_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StealTableOwnershipFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipFailure) ProtoMessage() {}

func (x *StealTableOwnershipFailure) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipFailure.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipFailure) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{25}
}

func (x *StealTableOwnershipFailure) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type StealTableOwnershipSuccess struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Table             *Table                 `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`                         // The table that was stolen
	MissingMigrations []*Migration           `protobuf:"bytes,2,rep,name=missingMigrations,proto3" json:"missingMigrations,omitempty"` // The missing migrations, if any
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StealTableOwnershipSuccess) Reset() {
	*x = StealTableOwnershipSuccess{}
	mi := &file_consensus_consensus_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StealTableOwnershipSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipSuccess) ProtoMessage() {}

func (x *StealTableOwnershipSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipSuccess.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipSuccess) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{26}
}

func (x *StealTableOwnershipSuccess) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *StealTableOwnershipSuccess) GetMissingMigrations() []*Migration {
	if x != nil {
		return x.MissingMigrations
	}
	return nil
}

type StealTableOwnershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`                                   // The node sending the request
	Reason        StealReason            `protobuf:"varint,4,opt,name=reason,proto3,enum=atlas.consensus.StealReason" json:"reason,omitempty"` // The reason the table was stolen
	Table         *Table                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`                                     // The table to be stolen
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StealTableOwnershipRequest) Reset() {
	*x = StealTableOwnershipRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StealTableOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipRequest) ProtoMessage() {}

func (x *StealTableOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipRequest.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{27}
}

func (x *StealTableOwnershipRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *StealTableOwnershipRequest) GetReason() StealReason {
	if x != nil {
		return x.Reason
	}
	return StealReason_queryReason
}

func (x *StealTableOwnershipRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type StealTableOwnershipResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Promised bool                   `protobuf:"varint,1,opt,name=promised,proto3" json:"promised,omitempty"` // Whether the operation was successful
	// Types that are valid to be assigned to Response:
	//
	//	*StealTableOwnershipResponse_Failure
	//	*StealTableOwnershipResponse_Success
	Response      isStealTableOwnershipResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StealTableOwnershipResponse) Reset() {
	*x = StealTableOwnershipResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StealTableOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipResponse) ProtoMessage() {}

func (x *StealTableOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipResponse.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{28}
}

func (x *StealTableOwnershipResponse) GetPromised() bool {
	if x != nil {
		return x.Promised
	}
	return false
}

func (x *StealTableOwnershipResponse) GetResponse() isStealTableOwnershipResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StealTableOwnershipResponse) GetFailure() *StealTableOwnershipFailure {
	if x != nil {
		if x, ok := x.Response.(*StealTableOwnershipResponse_Failure); ok {
			return x.Failure
		}
	}
	return nil
}

func (x *StealTableOwnershipResponse) GetSuccess() *StealTableOwnershipSuccess {
	if x != nil {
		if x, ok := x.Response.(*StealTableOwnershipResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

type isStealTableOwnershipResponse_Response interface {
	isStealTableOwnershipResponse_Response()
}

type StealTableOwnershipResponse_Failure struct {
	Failure *StealTableOwnershipFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"` // The table that was not stolen
}

type StealTableOwnershipResponse_Success struct {
	Success *StealTableOwnershipSuccess `protobuf:"bytes,3,opt,name=success,proto3,oneof"` // The table that was stolen
}

func (*StealTableOwnershipResponse_Failure) isStealTableOwnershipResponse_Response() {}

func (*StealTableOwnershipResponse_Success) isStealTableOwnershipResponse_Response() {}

type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          // The ID of the node
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // The address of the node
	Region        *Region                `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`   // The region the node is in
	Port          int64                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`      // The port the node listens on
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`  // Whether the node is active
	Rtt           *durationpb.Duration   `protobuf:"bytes,6,opt,name=rtt,proto3" json:"rtt,omitempty"`         // The round trip time to the node
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_consensus_consensus_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{29}
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Node) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Node) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Node) GetRtt() *durationpb.Duration {
	if x != nil {
		return x.Rtt
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // The region name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Region) Reset() {
	*x = Region{}
	mi := &file_consensus_consensus_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{30}
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Storage message for efficient migration persistence
type StoredMigrationBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Migration     *Migration             `protobuf:"bytes,1,opt,name=migration,proto3" json:"migration,omitempty"`  // The complete migration
	Committed     bool                   `protobuf:"varint,2,opt,name=committed,proto3" json:"committed,omitempty"` // Whether this migration batch is committed
	Gossip        bool                   `protobuf:"varint,3,opt,name=gossip,proto3" json:"gossip,omitempty"`       // Whether this migration batch came from gossip
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoredMigrationBatch) Reset() {
	*x = StoredMigrationBatch{}
	mi := &file_consensus_consensus_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoredMigrationBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredMigrationBatch) ProtoMessage() {}

func (x *StoredMigrationBatch) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredMigrationBatch.ProtoReflect.Descriptor instead.
func (*StoredMigrationBatch) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{31}
}

func (x *StoredMigrationBatch) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

func (x *StoredMigrationBatch) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

func (x *StoredMigrationBatch) GetGossip() bool {
	if x != nil {
		return x.Gossip
	}
	return false
}

// Ping messages for health checks
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeId  int64                  `protobuf:"varint,1,opt,name=sender_node_id,json=senderNodeId,proto3" json:"sender_node_id,omitempty"` // The ID of the node sending the ping
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                              // Timestamp of the ping
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{32}
}

func (x *PingRequest) GetSenderNodeId() int64 {
	if x != nil {
		return x.SenderNodeId
	}
	return 0
}

func (x *PingRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type PingResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                          // Whether the ping was successful
	ResponderNodeId int64                  `protobuf:"varint,2,opt,name=responder_node_id,json=responderNodeId,proto3" json:"responder_node_id,omitempty"` // The ID of the node responding
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                       // Timestamp of the response
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{33}
}

func (x *PingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PingResponse) GetResponderNodeId() int64 {
	if x != nil {
		return x.ResponderNodeId
	}
	return 0
}

func (x *PingResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Remote read messages for leader-based reads
type ReadKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"` // The node requesting the read
	Key           []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`       // The key to read
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadKeyRequest) Reset() {
	*x = ReadKeyRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadKeyRequest) ProtoMessage() {}

func (x *ReadKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadKeyRequest.ProtoReflect.Descriptor instead.
func (*ReadKeyRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{34}
}

func (x *ReadKeyRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *ReadKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type ReadKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the read was successful
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`      // The value if found, empty if not found
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`      // Error message if not successful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadKeyResponse) Reset() {
	*x = ReadKeyResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadKeyResponse) ProtoMessage() {}

func (x *ReadKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadKeyResponse.ProtoReflect.Descriptor instead.
func (*ReadKeyResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{35}
}

func (x *ReadKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReadKeyResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReadKeyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Remote prefix scan
type PrefixScanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Prefix        []byte                 `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrefixScanRequest) Reset() {
	*x = PrefixScanRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixScanRequest) ProtoMessage() {}

func (x *PrefixScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixScanRequest.ProtoReflect.Descriptor instead.
func (*PrefixScanRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{36}
}

func (x *PrefixScanRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *PrefixScanRequest) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type PrefixScanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Keys          [][]byte               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrefixScanResponse) Reset() {
	*x = PrefixScanResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixScanResponse) ProtoMessage() {}

func (x *PrefixScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixScanResponse.ProtoReflect.Descriptor instead.
func (*PrefixScanResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{37}
}

func (x *PrefixScanResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PrefixScanResponse) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PrefixScanResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type WriteKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"` // The node requesting the write
	Table         []byte                 `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`   // The table the key belongs to
	Value         *KVChange              `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`   // The value to write
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteKeyRequest) Reset() {
	*x = WriteKeyRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteKeyRequest) ProtoMessage() {}

func (x *WriteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteKeyRequest.ProtoReflect.Descriptor instead.
func (*WriteKeyRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{38}
}

func (x *WriteKeyRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *WriteKeyRequest) GetTable() []byte {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *WriteKeyRequest) GetValue() *KVChange {
	if x != nil {
		return x.Value
	}
	return nil
}

type WriteKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the write was successful
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error message if not successful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteKeyResponse) Reset() {
	*x = WriteKeyResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteKeyResponse) ProtoMessage() {}

func (x *WriteKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteKeyResponse.ProtoReflect.Descriptor instead.
func (*WriteKeyResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{39}
}

func (x *WriteKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WriteKeyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ACL data structure for protobuf encoding
type ACLData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Principals    []string               `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`                // List of principals with access to this key
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // When ACL was created
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // When ACL was last modified
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ACLData) Reset() {
	*x = ACLData{}
	mi := &file_consensus_consensus_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACLData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLData) ProtoMessage() {}

func (x *ACLData) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLData.ProtoReflect.Descriptor instead.
func (*ACLData) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{40}
}

func (x *ACLData) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *ACLData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ACLData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_consensus_consensus_proto protoreflect.FileDescriptor

const file_consensus_consensus_proto_rawDesc = "" +
	"\n" +
	"\x19consensus/consensus.proto\x12\x0fatlas.consensus\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\"\x98\x01\n" +
	"\x10MigrationVersion\x12\"\n" +
	"\ftableVersion\x18\x01 \x01(\x03R\ftableVersion\x12*\n" +
	"\x10migrationVersion\x18\x02 \x01(\x03R\x10migrationVersion\x12\x16\n" +
	"\x06nodeId\x18\x03 \x01(\x03R\x06nodeId\x12\x1c\n" +
	"\ttableName\x18\x04 \x01(\fR\ttableName\"\x99\x02\n" +
	"\x0fGossipMigration\x12F\n" +
	"\x10migrationRequest\x18\x01 \x01(\v2\x1a.atlas.consensus.MigrationR\x10migrationRequest\x12,\n" +
	"\x05table\x18\x02 \x01(\v2\x16.atlas.consensus.TableR\x05table\x12O\n" +
	"\x11previousMigration\x18\x03 \x01(\v2!.atlas.consensus.MigrationVersionR\x11previousMigration\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\x03R\x03ttl\x12-\n" +
	"\x06sender\x18\x05 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\"u\n" +
	"\x13JoinClusterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12,\n" +
	"\x05table\x18\x02 \x01(\v2\x16.atlas.consensus.TableR\x05table\x12\x16\n" +
	"\x06nodeId\x18\x03 \x01(\x03R\x06nodeId\"-\n" +
	"\x0fSchemaMigration\x12\x1a\n" +
	"\bcommands\x18\x01 \x03(\tR\bcommands\"\x9f\x01\n" +
	"\x03ACL\x120\n" +
	"\x06owners\x18\x01 \x01(\v2\x18.atlas.consensus.ACLDataR\x06owners\x122\n" +
	"\areaders\x18\x02 \x01(\v2\x18.atlas.consensus.ACLDataR\areaders\x122\n" +
	"\awriters\x18\x03 \x01(\v2\x18.atlas.consensus.ACLDataR\awriters\"=\n" +
	"\rDataReference\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x1a\n" +
	"\bchecksum\x18\x02 \x01(\fR\bchecksum\"\xb2\x01\n" +
	"\x06Record\x120\n" +
	"\x05value\x18\x01 \x01(\v2\x18.atlas.consensus.RawDataH\x00R\x05value\x122\n" +
	"\x03ref\x18\x03 \x01(\v2\x1e.atlas.consensus.DataReferenceH\x00R\x03ref\x12:\n" +
	"\raccessControl\x18\x02 \x01(\v2\x14.atlas.consensus.ACLR\raccessControlB\x06\n" +
	"\x04data\"\x1d\n" +
	"\aRawData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"J\n" +
	"\tSetChange\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12+\n" +
	"\x04data\x18\x02 \x01(\v2\x17.atlas.consensus.RecordR\x04data\"\x8f\x01\n" +
	"\tAclChange\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x122\n" +
	"\baddition\x18\x02 \x01(\v2\x14.atlas.consensus.ACLH\x00R\baddition\x122\n" +
	"\bdeletion\x18\x03 \x01(\v2\x14.atlas.consensus.ACLH\x00R\bdeletionB\b\n" +
	"\x06change\"\x1d\n" +
	"\tDelChange\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\"f\n" +
	"\x10SubscriptionList\x12@\n" +
	"\rsubscriptions\x18\x01 \x03(\v2\x1a.atlas.consensus.SubscribeR\rsubscriptions\x12\x10\n" +
	"\x03log\x18\x02 \x03(\fR\x03log\"\xa5\x01\n" +
	"\x10SubscribeOptions\x12\x14\n" +
	"\x05batch\x18\x01 \x01(\bR\x05batch\x12$\n" +
	"\rretryAttempts\x18\x02 \x01(\x11R\rretryAttempts\x12A\n" +
	"\x0eretryAfterBase\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x0eretryAfterBase\x12\x12\n" +
	"\x04auth\x18\x04 \x01(\tR\x04auth\"r\n" +
	"\tSubscribe\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\fR\x06prefix\x12;\n" +
	"\aoptions\x18\x03 \x01(\v2!.atlas.consensus.SubscribeOptionsR\aoptions\"\xae\x02\n" +
	"\x06Notify\x12\x10\n" +
	"\x03key\x18\x02 \x01(\fR\x03key\x12.\n" +
	"\x03set\x18\x03 \x01(\v2\x1a.atlas.consensus.SetChangeH\x00R\x03set\x12.\n" +
	"\x03del\x18\x04 \x01(\v2\x1a.atlas.consensus.DelChangeH\x00R\x03del\x12.\n" +
	"\x03acl\x18\x05 \x01(\v2\x1a.atlas.consensus.AclChangeH\x00R\x03acl\x12\x18\n" +
	"\aversion\x18\x06 \x01(\tR\aversion\x12*\n" +
	"\x02ts\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x02ts\x122\n" +
	"\x06origin\x18\b \x01(\v2\x1a.atlas.consensus.SubscribeR\x06originB\b\n" +
	"\x06change\"\xba\x02\n" +
	"\bKVChange\x12.\n" +
	"\x03set\x18\x01 \x01(\v2\x1a.atlas.consensus.SetChangeH\x00R\x03set\x12.\n" +
	"\x03del\x18\x02 \x01(\v2\x1a.atlas.consensus.DelChangeH\x00R\x03del\x12.\n" +
	"\x04data\x18\x03 \x01(\v2\x18.atlas.consensus.RawDataH\x00R\x04data\x12.\n" +
	"\x03acl\x18\x04 \x01(\v2\x1a.atlas.consensus.AclChangeH\x00R\x03acl\x12.\n" +
	"\x03sub\x18\x05 \x01(\v2\x1a.atlas.consensus.SubscribeH\x00R\x03sub\x121\n" +
	"\x06notify\x18\x06 \x01(\v2\x17.atlas.consensus.NotifyH\x00R\x06notifyB\v\n" +
	"\toperation\"\x7f\n" +
	"\rDataMigration\x12.\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x123\n" +
	"\x06change\x18\x02 \x01(\v2\x19.atlas.consensus.KVChangeH\x00R\x06changeB\t\n" +
	"\asession\"\x0e\n" +
	"\fNilMigration\"\xfc\x01\n" +
	"\tMigration\x12;\n" +
	"\aversion\x18\x01 \x01(\v2!.atlas.consensus.MigrationVersionR\aversion\x12:\n" +
	"\x06schema\x18\x02 \x01(\v2 .atlas.consensus.SchemaMigrationH\x00R\x06schema\x124\n" +
	"\x04data\x18\x03 \x01(\v2\x1e.atlas.consensus.DataMigrationH\x00R\x04data\x123\n" +
	"\x04none\x18\x04 \x01(\v2\x1d.atlas.consensus.NilMigrationH\x00R\x04noneB\v\n" +
	"\tmigration\"\x80\x01\n" +
	"\x15WriteMigrationRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x128\n" +
	"\tmigration\x18\x02 \x01(\v2\x1a.atlas.consensus.MigrationR\tmigration\"`\n" +
	"\x16WriteMigrationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12,\n" +
	"\x05table\x18\x02 \x01(\v2\x16.atlas.consensus.TableR\x05table\"5\n" +
	"\tPrincipal\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x9f\x01\n" +
	"\x05Shard\x12,\n" +
	"\x05table\x18\x01 \x01(\v2\x16.atlas.consensus.TableR\x05table\x12,\n" +
	"\x05shard\x18\x02 \x01(\v2\x16.atlas.consensus.TableR\x05shard\x12:\n" +
	"\n" +
	"principals\x18\x03 \x03(\v2\x1a.atlas.consensus.PrincipalR\n" +
	"principals\"\xb1\x03\n" +
	"\x05Table\x12\x12\n" +
	"\x04name\x18\x01 \x01(\fR\x04name\x12M\n" +
	"\x10replicationLevel\x18\x02 \x01(\x0e2!.atlas.consensus.ReplicationLevelR\x10replicationLevel\x12+\n" +
	"\x05owner\x18\x03 \x01(\v2\x15.atlas.consensus.NodeR\x05owner\x128\n" +
	"\tcreatedAt\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x18\n" +
	"\aversion\x18\x05 \x01(\x03R\aversion\x12&\n" +
	"\x0eallowedRegions\x18\x06 \x03(\tR\x0eallowedRegions\x12,\n" +
	"\x11restrictedRegions\x18\a \x03(\tR\x11restrictedRegions\x12\x14\n" +
	"\x05group\x18\t \x01(\tR\x05group\x12.\n" +
	"\x04type\x18\n" +
	" \x01(\x0e2\x1a.atlas.consensus.TableTypeR\x04type\x12(\n" +
	"\x0fshardPrincipals\x18\v \x03(\tR\x0fshardPrincipals\"n\n" +
	"\n" +
	"TableGroup\x120\n" +
	"\adetails\x18\x01 \x01(\v2\x16.atlas.consensus.TableR\adetails\x12.\n" +
	"\x06tables\x18\x02 \x03(\v2\x16.atlas.consensus.TableR\x06tables\"J\n" +
	"\x1aStealTableOwnershipFailure\x12,\n" +
	"\x05table\x18\x01 \x01(\v2\x16.atlas.consensus.TableR\x05table\"\x94\x01\n" +
	"\x1aStealTableOwnershipSuccess\x12,\n" +
	"\x05table\x18\x01 \x01(\v2\x16.atlas.consensus.TableR\x05table\x12H\n" +
	"\x11missingMigrations\x18\x02 \x03(\v2\x1a.atlas.consensus.MigrationR\x11missingMigrations\"\xaf\x01\n" +
	"\x1aStealTableOwnershipRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x124\n" +
	"\x06reason\x18\x04 \x01(\x0e2\x1c.atlas.consensus.StealReasonR\x06reason\x12,\n" +
	"\x05table\x18\x02 \x01(\v2\x16.atlas.consensus.TableR\x05table\"\xd7\x01\n" +
	"\x1bStealTableOwnershipResponse\x12\x1a\n" +
	"\bpromised\x18\x01 \x01(\bR\bpromised\x12G\n" +
	"\afailure\x18\x02 \x01(\v2+.atlas.consensus.StealTableOwnershipFailureH\x00R\afailure\x12G\n" +
	"\asuccess\x18\x03 \x01(\v2+.atlas.consensus.StealTableOwnershipSuccessH\x00R\asuccessB\n" +
	"\n" +
	"\bresponse\"\xba\x01\n" +
	"\x04Node\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12/\n" +
	"\x06region\x18\x03 \x01(\v2\x17.atlas.consensus.RegionR\x06region\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x03R\x04port\x12\x16\n" +
	"\x06active\x18\x05 \x01(\bR\x06active\x12+\n" +
	"\x03rtt\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x03rtt\"\x1c\n" +
	"\x06Region\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x86\x01\n" +
	"\x14StoredMigrationBatch\x128\n" +
	"\tmigration\x18\x01 \x01(\v2\x1a.atlas.consensus.MigrationR\tmigration\x12\x1c\n" +
	"\tcommitted\x18\x02 \x01(\bR\tcommitted\x12\x16\n" +
	"\x06gossip\x18\x03 \x01(\bR\x06gossip\"m\n" +
	"\vPingRequest\x12$\n" +
	"\x0esender_node_id\x18\x01 \x01(\x03R\fsenderNodeId\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\x8e\x01\n" +
	"\fPingResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12*\n" +
	"\x11responder_node_id\x18\x02 \x01(\x03R\x0fresponderNodeId\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"Q\n" +
	"\x0eReadKeyRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x12\x10\n" +
	"\x03key\x18\x02 \x01(\fR\x03key\"W\n" +
	"\x0fReadKeyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"Z\n" +
	"\x11PrefixScanRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\fR\x06prefix\"X\n" +
	"\x12PrefixScanResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x12\n" +
	"\x04keys\x18\x02 \x03(\fR\x04keys\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\x87\x01\n" +
	"\x0fWriteKeyRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x12\x14\n" +
	"\x05table\x18\x03 \x01(\fR\x05table\x12/\n" +
	"\x05value\x18\x04 \x01(\v2\x19.atlas.consensus.KVChangeR\x05value\"B\n" +
	"\x10WriteKeyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x9f\x01\n" +
	"\aACLData\x12\x1e\n" +
	"\n" +
	"principals\x18\x01 \x03(\tR\n" +
	"principals\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt*7\n" +
	"\x10ReplicationLevel\x12\n" +
	"\n" +
	"\x06global\x10\x00\x12\f\n" +
	"\bregional\x10\x01\x12\t\n" +
	"\x05local\x10\x02*E\n" +
	"\tTableType\x12\t\n" +
	"\x05table\x10\x00\x12\t\n" +
	"\x05group\x10\x01\x12\v\n" +
	"\atrigger\x10\x02\x12\b\n" +
	"\x04view\x10\x03\x12\v\n" +
	"\asharded\x10\x04*D\n" +
	"\vStealReason\x12\x0f\n" +
	"\vqueryReason\x10\x00\x12\x0f\n" +
	"\vwriteReason\x10\x01\x12\x13\n" +
	"\x0fdiscoveryReason\x10\x022\xe4\x06\n" +
	"\tConsensus\x12r\n" +
	"\x13StealTableOwnership\x12+.atlas.consensus.StealTableOwnershipRequest\x1a,.atlas.consensus.StealTableOwnershipResponse\"\x00\x12c\n" +
	"\x0eWriteMigration\x12&.atlas.consensus.WriteMigrationRequest\x1a'.atlas.consensus.WriteMigrationResponse\"\x00\x12S\n" +
	"\x0fAcceptMigration\x12&.atlas.consensus.WriteMigrationRequest\x1a\x16.google.protobuf.Empty\"\x00\x12L\n" +
	"\vJoinCluster\x12\x15.atlas.consensus.Node\x1a$.atlas.consensus.JoinClusterResponse\"\x00\x12D\n" +
	"\x06Gossip\x12 .atlas.consensus.GossipMigration\x1a\x16.google.protobuf.Empty\"\x00\x12E\n" +
	"\x04Ping\x12\x1c.atlas.consensus.PingRequest\x1a\x1d.atlas.consensus.PingResponse\"\x00\x12N\n" +
	"\aReadKey\x12\x1f.atlas.consensus.ReadKeyRequest\x1a .atlas.consensus.ReadKeyResponse\"\x00\x12Q\n" +
	"\bWriteKey\x12 .atlas.consensus.WriteKeyRequest\x1a!.atlas.consensus.WriteKeyResponse\"\x00\x12R\n" +
	"\tDeleteKey\x12 .atlas.consensus.WriteKeyRequest\x1a!.atlas.consensus.WriteKeyResponse\"\x00\x12W\n" +
	"\n" +
	"PrefixScan\x12\".atlas.consensus.PrefixScanRequest\x1a#.atlas.consensus.PrefixScanResponse\"\x00B\fZ\n" +
	"/consensusb\x06proto3"

var (
	file_consensus_consensus_proto_rawDescOnce sync.Once
	file_consensus_consensus_proto_rawDescData []byte
)

func file_consensus_consensus_proto_rawDescGZIP() []byte {
	file_consensus_consensus_proto_rawDescOnce.Do(func() {
		file_consensus_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_consensus_consensus_proto_rawDesc), len(file_consensus_consensus_proto_rawDesc)))
	})
	return file_consensus_consensus_proto_rawDescData
}

var file_consensus_consensus_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_consensus_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_consensus_consensus_proto_goTypes = []any{
	(ReplicationLevel)(0),               // 0: atlas.consensus.ReplicationLevel
	(TableType)(0),                      // 1: atlas.consensus.TableType
	(StealReason)(0),                    // 2: atlas.consensus.StealReason
	(*MigrationVersion)(nil),            // 3: atlas.consensus.MigrationVersion
	(*GossipMigration)(nil),             // 4: atlas.consensus.GossipMigration
	(*JoinClusterResponse)(nil),         // 5: atlas.consensus.JoinClusterResponse
	(*SchemaMigration)(nil),             // 6: atlas.consensus.SchemaMigration
	(*ACL)(nil),                         // 7: atlas.consensus.ACL
	(*DataReference)(nil),               // 8: atlas.consensus.DataReference
	(*Record)(nil),                      // 9: atlas.consensus.Record
	(*RawData)(nil),                     // 10: atlas.consensus.RawData
	(*SetChange)(nil),                   // 11: atlas.consensus.SetChange
	(*AclChange)(nil),                   // 12: atlas.consensus.AclChange
	(*DelChange)(nil),                   // 13: atlas.consensus.DelChange
	(*SubscriptionList)(nil),            // 14: atlas.consensus.SubscriptionList
	(*SubscribeOptions)(nil),            // 15: atlas.consensus.SubscribeOptions
	(*Subscribe)(nil),                   // 16: atlas.consensus.Subscribe
	(*Notify)(nil),                      // 17: atlas.consensus.Notify
	(*KVChange)(nil),                    // 18: atlas.consensus.KVChange
	(*DataMigration)(nil),               // 19: atlas.consensus.DataMigration
	(*NilMigration)(nil),                // 20: atlas.consensus.NilMigration
	(*Migration)(nil),                   // 21: atlas.consensus.Migration
	(*WriteMigrationRequest)(nil),       // 22: atlas.consensus.WriteMigrationRequest
	(*WriteMigrationResponse)(nil),      // 23: atlas.consensus.WriteMigrationResponse
	(*Principal)(nil),                   // 24: atlas.consensus.Principal
	(*Shard)(nil),                       // 25: atlas.consensus.Shard
	(*Table)(nil),                       // 26: atlas.consensus.Table
	(*TableGroup)(nil),                  // 27: atlas.consensus.TableGroup
	(*StealTableOwnershipFailure)(nil),  // 28: atlas.consensus.StealTableOwnershipFailure
	(*StealTableOwnershipSuccess)(nil),  // 29: atlas.consensus.StealTableOwnershipSuccess
	(*StealTableOwnershipRequest)(nil),  // 30: atlas.consensus.StealTableOwnershipRequest
	(*StealTableOwnershipResponse)(nil), // 31: atlas.consensus.StealTableOwnershipResponse
	(*Node)(nil),                        // 32: atlas.consensus.Node
	(*Region)(nil),                      // 33: atlas.consensus.Region
	(*StoredMigrationBatch)(nil),        // 34: atlas.consensus.StoredMigrationBatch
	(*PingRequest)(nil),                 // 35: atlas.consensus.PingRequest
	(*PingResponse)(nil),                // 36: atlas.consensus.PingResponse
	(*ReadKeyRequest)(nil),              // 37: atlas.consensus.ReadKeyRequest
	(*ReadKeyResponse)(nil),             // 38: atlas.consensus.ReadKeyResponse
	(*PrefixScanRequest)(nil),           // 39: atlas.consensus.PrefixScanRequest
	(*PrefixScanResponse)(nil),          // 40: atlas.consensus.PrefixScanResponse
	(*WriteKeyRequest)(nil),             // 41: atlas.consensus.WriteKeyRequest
	(*WriteKeyResponse)(nil),            // 42: atlas.consensus.WriteKeyResponse
	(*ACLData)(nil),                     // 43: atlas.consensus.ACLData
	(*durationpb.Duration)(nil),         // 44: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),       // 45: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 46: google.protobuf.Empty
}
var file_consensus_consensus_proto_depIdxs = []int32{
	21, // 0: atlas.consensus.GossipMigration.migrationRequest:type_name -> atlas.consensus.Migration
	26, // 1: atlas.consensus.GossipMigration.table:type_name -> atlas.consensus.Table
	3,  // 2: atlas.consensus.GossipMigration.previousMigration:type_name -> atlas.consensus.MigrationVersion
	32, // 3: atlas.consensus.GossipMigration.sender:type_name -> atlas.consensus.Node
	26, // 4: atlas.consensus.JoinClusterResponse.table:type_name -> atlas.consensus.Table
	43, // 5: atlas.consensus.ACL.owners:type_name -> atlas.consensus.ACLData
	43, // 6: atlas.consensus.ACL.readers:type_name -> atlas.consensus.ACLData
	43, // 7: atlas.consensus.ACL.writers:type_name -> atlas.consensus.ACLData
	10, // 8: atlas.consensus.Record.value:type_name -> atlas.consensus.RawData
	8,  // 9: atlas.consensus.Record.ref:type_name -> atlas.consensus.DataReference
	7,  // 10: atlas.consensus.Record.accessControl:type_name -> atlas.consensus.ACL
	9,  // 11: atlas.consensus.SetChange.data:type_name -> atlas.consensus.Record
	7,  // 12: atlas.consensus.AclChange.addition:type_name -> atlas.consensus.ACL
	7,  // 13: atlas.consensus.AclChange.deletion:type_name -> atlas.consensus.ACL
	16, // 14: atlas.consensus.SubscriptionList.subscriptions:type_name -> atlas.consensus.Subscribe
	44, // 15: atlas.consensus.SubscribeOptions.retryAfterBase:type_name -> google.protobuf.Duration
	15, // 16: atlas.consensus.Subscribe.options:type_name -> atlas.consensus.SubscribeOptions
	11, // 17: atlas.consensus.Notify.set:type_name -> atlas.consensus.SetChange
	13, // 18: atlas.consensus.Notify.del:type_name -> atlas.consensus.DelChange
	12, // 19: atlas.consensus.Notify.acl:type_name -> atlas.consensus.AclChange
	45, // 20: atlas.consensus.Notify.ts:type_name -> google.protobuf.Timestamp
	16, // 21: atlas.consensus.Notify.origin:type_name -> atlas.consensus.Subscribe
	11, // 22: atlas.consensus.KVChange.set:type_name -> atlas.consensus.SetChange
	13, // 23: atlas.consensus.KVChange.del:type_name -> atlas.consensus.DelChange
	10, // 24: atlas.consensus.KVChange.data:type_name -> atlas.consensus.RawData
	12, // 25: atlas.consensus.KVChange.acl:type_name -> atlas.consensus.AclChange
	16, // 26: atlas.consensus.KVChange.sub:type_name -> atlas.consensus.Subscribe
	17, // 27: atlas.consensus.KVChange.notify:type_name -> atlas.consensus.Notify
	45, // 28: atlas.consensus.DataMigration.time:type_name -> google.protobuf.Timestamp
	18, // 29: atlas.consensus.DataMigration.change:type_name -> atlas.consensus.KVChange
	3,  // 30: atlas.consensus.Migration.version:type_name -> atlas.consensus.MigrationVersion
	6,  // 31: atlas.consensus.Migration.schema:type_name -> atlas.consensus.SchemaMigration
	19, // 32: atlas.consensus.Migration.data:type_name -> atlas.consensus.DataMigration
	20, // 33: atlas.consensus.Migration.none:type_name -> atlas.consensus.NilMigration
	32, // 34: atlas.consensus.WriteMigrationRequest.sender:type_name -> atlas.consensus.Node
	21, // 35: atlas.consensus.WriteMigrationRequest.migration:type_name -> atlas.consensus.Migration
	26, // 36: atlas.consensus.WriteMigrationResponse.table:type_name -> atlas.consensus.Table
	26, // 37: atlas.consensus.Shard.table:type_name -> atlas.consensus.Table
	26, // 38: atlas.consensus.Shard.shard:type_name -> atlas.consensus.Table
	24, // 39: atlas.consensus.Shard.principals:type_name -> atlas.consensus.Principal
	0,  // 40: atlas.consensus.Table.replicationLevel:type_name -> atlas.consensus.ReplicationLevel
	32, // 41: atlas.consensus.Table.owner:type_name -> atlas.consensus.Node
	45, // 42: atlas.consensus.Table.createdAt:type_name -> google.protobuf.Timestamp
	1,  // 43: atlas.consensus.Table.type:type_name -> atlas.consensus.TableType
	26, // 44: atlas.consensus.TableGroup.details:type_name -> atlas.consensus.Table
	26, // 45: atlas.consensus.TableGroup.tables:type_name -> atlas.consensus.Table
	26, // 46: atlas.consensus.StealTableOwnershipFailure.table:type_name -> atlas.consensus.Table
	26, // 47: atlas.consensus.StealTableOwnershipSuccess.table:type_name -> atlas.consensus.Table
	21, // 48: atlas.consensus.StealTableOwnershipSuccess.missingMigrations:type_name -> atlas.consensus.Migration
	32, // 49: atlas.consensus.StealTableOwnershipRequest.sender:type_name -> atlas.consensus.Node
	2,  // 50: atlas.consensus.StealTableOwnershipRequest.reason:type_name -> atlas.consensus.StealReason
	26, // 51: atlas.consensus.StealTableOwnershipRequest.table:type_name -> atlas.consensus.Table
	28, // 52: atlas.consensus.StealTableOwnershipResponse.failure:type_name -> atlas.consensus.StealTableOwnershipFailure
	29, // 53: atlas.consensus.StealTableOwnershipResponse.success:type_name -> atlas.consensus.StealTableOwnershipSuccess
	33, // 54: atlas.consensus.Node.region:type_name -> atlas.consensus.Region
	44, // 55: atlas.consensus.Node.rtt:type_name -> google.protobuf.Duration
	21, // 56: atlas.consensus.StoredMigrationBatch.migration:type_name -> atlas.consensus.Migration
	45, // 57: atlas.consensus.PingRequest.timestamp:type_name -> google.protobuf.Timestamp
	45, // 58: atlas.consensus.PingResponse.timestamp:type_name -> google.protobuf.Timestamp
	32, // 59: atlas.consensus.ReadKeyRequest.sender:type_name -> atlas.consensus.Node
	32, // 60: atlas.consensus.PrefixScanRequest.sender:type_name -> atlas.consensus.Node
	32, // 61: atlas.consensus.WriteKeyRequest.sender:type_name -> atlas.consensus.Node
	18, // 62: atlas.consensus.WriteKeyRequest.value:type_name -> atlas.consensus.KVChange
	45, // 63: atlas.consensus.ACLData.created_at:type_name -> google.protobuf.Timestamp
	45, // 64: atlas.consensus.ACLData.updated_at:type_name -> google.protobuf.Timestamp
	30, // 65: atlas.consensus.Consensus.StealTableOwnership:input_type -> atlas.consensus.StealTableOwnershipRequest
	22, // 66: atlas.consensus.Consensus.WriteMigration:input_type -> atlas.consensus.WriteMigrationRequest
	22, // 67: atlas.consensus.Consensus.AcceptMigration:input_type -> atlas.consensus.WriteMigrationRequest
	32, // 68: atlas.consensus.Consensus.JoinCluster:input_type -> atlas.consensus.Node
	4,  // 69: atlas.consensus.Consensus.Gossip:input_type -> atlas.consensus.GossipMigration
	35, // 70: atlas.consensus.Consensus.Ping:input_type -> atlas.consensus.PingRequest
	37, // 71: atlas.consensus.Consensus.ReadKey:input_type -> atlas.consensus.ReadKeyRequest
	41, // 72: atlas.consensus.Consensus.WriteKey:input_type -> atlas.consensus.WriteKeyRequest
	41, // 73: atlas.consensus.Consensus.DeleteKey:input_type -> atlas.consensus.WriteKeyRequest
	39, // 74: atlas.consensus.Consensus.PrefixScan:input_type -> atlas.consensus.PrefixScanRequest
	31, // 75: atlas.consensus.Consensus.StealTableOwnership:output_type -> atlas.consensus.StealTableOwnershipResponse
	23, // 76: atlas.consensus.Consensus.WriteMigration:output_type -> atlas.consensus.WriteMigrationResponse
	46, // 77: atlas.consensus.Consensus.AcceptMigration:output_type -> google.protobuf.Empty
	5,  // 78: atlas.consensus.Consensus.JoinCluster:output_type -> atlas.consensus.JoinClusterResponse
	46, // 79: atlas.consensus.Consensus.Gossip:output_type -> google.protobuf.Empty
	36, // 80: atlas.consensus.Consensus.Ping:output_type -> atlas.consensus.PingResponse
	38, // 81: atlas.consensus.Consensus.ReadKey:output_type -> atlas.consensus.ReadKeyResponse
	42, // 82: atlas.consensus.Consensus.WriteKey:output_type -> atlas.consensus.WriteKeyResponse
	42, // 83: atlas.consensus.Consensus.DeleteKey:output_type -> atlas.consensus.WriteKeyResponse
	40, // 84: atlas.consensus.Consensus.PrefixScan:output_type -> atlas.consensus.PrefixScanResponse
	75, // [75:85] is the sub-list for method output_type
	65, // [65:75] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_consensus_consensus_proto_init() }
func file_consensus_consensus_proto_init() {
	if File_consensus_consensus_proto != nil {
		return
	}
	file_consensus_consensus_proto_msgTypes[6].OneofWrappers = []any{
		(*Record_Value)(nil),
		(*Record_Ref)(nil),
	}
	file_consensus_consensus_proto_msgTypes[9].OneofWrappers = []any{
		(*AclChange_Addition)(nil),
		(*AclChange_Deletion)(nil),
	}
	file_consensus_consensus_proto_msgTypes[14].OneofWrappers = []any{
		(*Notify_Set)(nil),
		(*Notify_Del)(nil),
		(*Notify_Acl)(nil),
	}
	file_consensus_consensus_proto_msgTypes[15].OneofWrappers = []any{
		(*KVChange_Set)(nil),
		(*KVChange_Del)(nil),
		(*KVChange_Data)(nil),
		(*KVChange_Acl)(nil),
		(*KVChange_Sub)(nil),
		(*KVChange_Notify)(nil),
	}
	file_consensus_consensus_proto_msgTypes[16].OneofWrappers = []any{
		(*DataMigration_Change)(nil),
	}
	file_consensus_consensus_proto_msgTypes[18].OneofWrappers = []any{
		(*Migration_Schema)(nil),
		(*Migration_Data)(nil),
		(*Migration_None)(nil),
	}
	file_consensus_consensus_proto_msgTypes[28].OneofWrappers = []any{
		(*StealTableOwnershipResponse_Failure)(nil),
		(*StealTableOwnershipResponse_Success)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_consensus_consensus_proto_rawDesc), len(file_consensus_consensus_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consensus_consensus_proto_goTypes,
		DependencyIndexes: file_consensus_consensus_proto_depIdxs,
		EnumInfos:         file_consensus_consensus_proto_enumTypes,
		MessageInfos:      file_consensus_consensus_proto_msgTypes,
	}.Build()
	File_consensus_consensus_proto = out.File
	file_consensus_consensus_proto_goTypes = nil
	file_consensus_consensus_proto_depIdxs = nil
}
