// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusClient interface {
	StealTableOwnership(ctx context.Context, in *StealTableOwnershipRequest, opts ...grpc.CallOption) (*StealTableOwnershipResponse, error)
	WriteMigration(ctx context.Context, in *WriteMigrationRequest, opts ...grpc.CallOption) (*WriteMigrationResponse, error)
	AcceptMigration(ctx context.Context, in *WriteMigrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LearnMigration(ctx context.Context, in *LearnMigrationRequest, opts ...grpc.CallOption) (Consensus_LearnMigrationClient, error)
}

type consensusClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusClient(cc grpc.ClientConnInterface) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) StealTableOwnership(ctx context.Context, in *StealTableOwnershipRequest, opts ...grpc.CallOption) (*StealTableOwnershipResponse, error) {
	out := new(StealTableOwnershipResponse)
	err := c.cc.Invoke(ctx, "/atlas.consensus.Consensus/StealTableOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) WriteMigration(ctx context.Context, in *WriteMigrationRequest, opts ...grpc.CallOption) (*WriteMigrationResponse, error) {
	out := new(WriteMigrationResponse)
	err := c.cc.Invoke(ctx, "/atlas.consensus.Consensus/WriteMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) AcceptMigration(ctx context.Context, in *WriteMigrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/atlas.consensus.Consensus/AcceptMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) LearnMigration(ctx context.Context, in *LearnMigrationRequest, opts ...grpc.CallOption) (Consensus_LearnMigrationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consensus_serviceDesc.Streams[0], "/atlas.consensus.Consensus/LearnMigration", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusLearnMigrationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consensus_LearnMigrationClient interface {
	Recv() (*Migration, error)
	grpc.ClientStream
}

type consensusLearnMigrationClient struct {
	grpc.ClientStream
}

func (x *consensusLearnMigrationClient) Recv() (*Migration, error) {
	m := new(Migration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsensusServer is the server API for Consensus service.
// All implementations must embed UnimplementedConsensusServer
// for forward compatibility
type ConsensusServer interface {
	StealTableOwnership(context.Context, *StealTableOwnershipRequest) (*StealTableOwnershipResponse, error)
	WriteMigration(context.Context, *WriteMigrationRequest) (*WriteMigrationResponse, error)
	AcceptMigration(context.Context, *WriteMigrationRequest) (*emptypb.Empty, error)
	LearnMigration(*LearnMigrationRequest, Consensus_LearnMigrationServer) error
	mustEmbedUnimplementedConsensusServer()
}

// UnimplementedConsensusServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (UnimplementedConsensusServer) StealTableOwnership(context.Context, *StealTableOwnershipRequest) (*StealTableOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StealTableOwnership not implemented")
}
func (UnimplementedConsensusServer) WriteMigration(context.Context, *WriteMigrationRequest) (*WriteMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMigration not implemented")
}
func (UnimplementedConsensusServer) AcceptMigration(context.Context, *WriteMigrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptMigration not implemented")
}
func (UnimplementedConsensusServer) LearnMigration(*LearnMigrationRequest, Consensus_LearnMigrationServer) error {
	return status.Errorf(codes.Unimplemented, "method LearnMigration not implemented")
}
func (UnimplementedConsensusServer) mustEmbedUnimplementedConsensusServer() {}

// UnsafeConsensusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServer will
// result in compilation errors.
type UnsafeConsensusServer interface {
	mustEmbedUnimplementedConsensusServer()
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_StealTableOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StealTableOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).StealTableOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.consensus.Consensus/StealTableOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).StealTableOwnership(ctx, req.(*StealTableOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_WriteMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).WriteMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.consensus.Consensus/WriteMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).WriteMigration(ctx, req.(*WriteMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_AcceptMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).AcceptMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atlas.consensus.Consensus/AcceptMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).AcceptMigration(ctx, req.(*WriteMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_LearnMigration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LearnMigrationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsensusServer).LearnMigration(m, &consensusLearnMigrationServer{stream})
}

type Consensus_LearnMigrationServer interface {
	Send(*Migration) error
	grpc.ServerStream
}

type consensusLearnMigrationServer struct {
	grpc.ServerStream
}

func (x *consensusLearnMigrationServer) Send(m *Migration) error {
	return x.ServerStream.SendMsg(m)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atlas.consensus.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StealTableOwnership",
			Handler:    _Consensus_StealTableOwnership_Handler,
		},
		{
			MethodName: "WriteMigration",
			Handler:    _Consensus_WriteMigration_Handler,
		},
		{
			MethodName: "AcceptMigration",
			Handler:    _Consensus_AcceptMigration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LearnMigration",
			Handler:       _Consensus_LearnMigration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "consensus/consensus.proto",
}
