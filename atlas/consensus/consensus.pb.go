// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: consensus/consensus.proto

package consensus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplicationLevel int32

const (
	ReplicationLevel_global   ReplicationLevel = 0 // Replicate the table globally
	ReplicationLevel_regional ReplicationLevel = 1 // Replicate the table within the region
	ReplicationLevel_local    ReplicationLevel = 2 // Replicate the table within the node
)

// Enum value maps for ReplicationLevel.
var (
	ReplicationLevel_name = map[int32]string{
		0: "global",
		1: "regional",
		2: "local",
	}
	ReplicationLevel_value = map[string]int32{
		"global":   0,
		"regional": 1,
		"local":    2,
	}
)

func (x ReplicationLevel) Enum() *ReplicationLevel {
	p := new(ReplicationLevel)
	*p = x
	return p
}

func (x ReplicationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[0].Descriptor()
}

func (ReplicationLevel) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[0]
}

func (x ReplicationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicationLevel.Descriptor instead.
func (ReplicationLevel) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

type TopologyChange int32

const (
	TopologyChange_UNKNOWN TopologyChange = 0 // Unknown change
	TopologyChange_ADD     TopologyChange = 1 // Add a node or region
	TopologyChange_REMOVE  TopologyChange = 2 // Remove a node or region
)

// Enum value maps for TopologyChange.
var (
	TopologyChange_name = map[int32]string{
		0: "UNKNOWN",
		1: "ADD",
		2: "REMOVE",
	}
	TopologyChange_value = map[string]int32{
		"UNKNOWN": 0,
		"ADD":     1,
		"REMOVE":  2,
	}
)

func (x TopologyChange) Enum() *TopologyChange {
	p := new(TopologyChange)
	*p = x
	return p
}

func (x TopologyChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyChange) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[1].Descriptor()
}

func (TopologyChange) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[1]
}

func (x TopologyChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyChange.Descriptor instead.
func (TopologyChange) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

type SchemaMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"` // The commands to be executed
}

func (x *SchemaMigration) Reset() {
	*x = SchemaMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMigration) ProtoMessage() {}

func (x *SchemaMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMigration.ProtoReflect.Descriptor instead.
func (*SchemaMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *SchemaMigration) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type DataMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session [][]byte `protobuf:"bytes,1,rep,name=session,proto3" json:"session,omitempty"` // The data to be written
}

func (x *DataMigration) Reset() {
	*x = DataMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMigration) ProtoMessage() {}

func (x *DataMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMigration.ProtoReflect.Descriptor instead.
func (*DataMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *DataMigration) GetSession() [][]byte {
	if x != nil {
		return x.Session
	}
	return nil
}

type SelfMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *SelfMigration) Reset() {
	*x = SelfMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfMigration) ProtoMessage() {}

func (x *SelfMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfMigration.ProtoReflect.Descriptor instead.
func (*SelfMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *SelfMigration) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type Migration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"` // The id of the table (aka, ballot)
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"` // The version of the table (aka, slot)
	// Types that are assignable to Migration:
	//
	//	*Migration_Schema
	//	*Migration_Data
	//	*Migration_Self
	Migration isMigration_Migration `protobuf_oneof:"migration"`
}

func (x *Migration) Reset() {
	*x = Migration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Migration) ProtoMessage() {}

func (x *Migration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Migration.ProtoReflect.Descriptor instead.
func (*Migration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *Migration) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *Migration) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *Migration) GetMigration() isMigration_Migration {
	if m != nil {
		return m.Migration
	}
	return nil
}

func (x *Migration) GetSchema() *SchemaMigration {
	if x, ok := x.GetMigration().(*Migration_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *Migration) GetData() *DataMigration {
	if x, ok := x.GetMigration().(*Migration_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Migration) GetSelf() *SelfMigration {
	if x, ok := x.GetMigration().(*Migration_Self); ok {
		return x.Self
	}
	return nil
}

type isMigration_Migration interface {
	isMigration_Migration()
}

type Migration_Schema struct {
	Schema *SchemaMigration `protobuf:"bytes,3,opt,name=schema,proto3,oneof"` // The schema migration
}

type Migration_Data struct {
	Data *DataMigration `protobuf:"bytes,4,opt,name=data,proto3,oneof"` // The data migration
}

type Migration_Self struct {
	Self *SelfMigration `protobuf:"bytes,5,opt,name=self,proto3,oneof"`
}

func (*Migration_Schema) isMigration_Migration() {}

func (*Migration_Data) isMigration_Migration() {}

func (*Migration_Self) isMigration_Migration() {}

type WriteMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId   int64      `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`    // The ID of the table
	Sender    *Node      `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`       // The node sending the migration
	Migration *Migration `protobuf:"bytes,3,opt,name=migration,proto3" json:"migration,omitempty"` // The migration to be written
}

func (x *WriteMigrationRequest) Reset() {
	*x = WriteMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationRequest) ProtoMessage() {}

func (x *WriteMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationRequest.ProtoReflect.Descriptor instead.
func (*WriteMigrationRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *WriteMigrationRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *WriteMigrationRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *WriteMigrationRequest) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

type WriteMigrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`      // Whether the operation was successful
	Table      *Table       `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`           // The table if the operation was not successful
	Leadership []*Node      `protobuf:"bytes,3,rep,name=leadership,proto3" json:"leadership,omitempty"` // The nodes that are the new leaders
	Migrations []*Migration `protobuf:"bytes,4,rep,name=migrations,proto3" json:"migrations,omitempty"` // missing migrations if the operation was not successful
}

func (x *WriteMigrationResponse) Reset() {
	*x = WriteMigrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationResponse) ProtoMessage() {}

func (x *WriteMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationResponse.ProtoReflect.Descriptor instead.
func (*WriteMigrationResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *WriteMigrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WriteMigrationResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *WriteMigrationResponse) GetLeadership() []*Node {
	if x != nil {
		return x.Leadership
	}
	return nil
}

func (x *WriteMigrationResponse) GetMigrations() []*Migration {
	if x != nil {
		return x.Migrations
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                   // The ID of the table
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                // The name of the table
	Version          int64                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                                                         // The version of the table
	GlobalOwner      *Node                  `protobuf:"bytes,4,opt,name=globalOwner,proto3" json:"globalOwner,omitempty"`                                                  // The global owner of the table
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                                                      // The time the table was created
	ReplicationLevel ReplicationLevel       `protobuf:"varint,6,opt,name=replicationLevel,proto3,enum=atlas.consensus.ReplicationLevel" json:"replicationLevel,omitempty"` // The replication level of the table
	AllowedRegions   []string               `protobuf:"bytes,7,rep,name=allowedRegions,proto3" json:"allowedRegions,omitempty"`                                            // The regions the global table is allowed in
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *Table) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Table) GetGlobalOwner() *Node {
	if x != nil {
		return x.GlobalOwner
	}
	return nil
}

func (x *Table) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Table) GetReplicationLevel() ReplicationLevel {
	if x != nil {
		return x.ReplicationLevel
	}
	return ReplicationLevel_global
}

func (x *Table) GetAllowedRegions() []string {
	if x != nil {
		return x.AllowedRegions
	}
	return nil
}

type StealTableOwnershipFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"` // The table that was not stolen
}

func (x *StealTableOwnershipFailure) Reset() {
	*x = StealTableOwnershipFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipFailure) ProtoMessage() {}

func (x *StealTableOwnershipFailure) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipFailure.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipFailure) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *StealTableOwnershipFailure) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type StealTableOwnershipSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table             *Table       `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`                         // The table that was stolen
	Migration         *Migration   `protobuf:"bytes,3,opt,name=migration,proto3" json:"migration,omitempty"`                 // The migration to be written
	MissingMigrations []*Migration `protobuf:"bytes,4,rep,name=missingMigrations,proto3" json:"missingMigrations,omitempty"` // The missing migrations, if any
}

func (x *StealTableOwnershipSuccess) Reset() {
	*x = StealTableOwnershipSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipSuccess) ProtoMessage() {}

func (x *StealTableOwnershipSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipSuccess.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipSuccess) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *StealTableOwnershipSuccess) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *StealTableOwnershipSuccess) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

func (x *StealTableOwnershipSuccess) GetMissingMigrations() []*Migration {
	if x != nil {
		return x.MissingMigrations
	}
	return nil
}

type StealTableOwnershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender *Node `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"` // The node sending the request
	// Types that are assignable to Response:
	//
	//	*StealTableOwnershipRequest_Failure
	//	*StealTableOwnershipRequest_Success
	Response isStealTableOwnershipRequest_Response `protobuf_oneof:"response"`
}

func (x *StealTableOwnershipRequest) Reset() {
	*x = StealTableOwnershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipRequest) ProtoMessage() {}

func (x *StealTableOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipRequest.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *StealTableOwnershipRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (m *StealTableOwnershipRequest) GetResponse() isStealTableOwnershipRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StealTableOwnershipRequest) GetFailure() *StealTableOwnershipFailure {
	if x, ok := x.GetResponse().(*StealTableOwnershipRequest_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *StealTableOwnershipRequest) GetSuccess() *StealTableOwnershipSuccess {
	if x, ok := x.GetResponse().(*StealTableOwnershipRequest_Success); ok {
		return x.Success
	}
	return nil
}

type isStealTableOwnershipRequest_Response interface {
	isStealTableOwnershipRequest_Response()
}

type StealTableOwnershipRequest_Failure struct {
	Failure *StealTableOwnershipFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"` // The table that was not stolen
}

type StealTableOwnershipRequest_Success struct {
	Success *StealTableOwnershipSuccess `protobuf:"bytes,3,opt,name=success,proto3,oneof"` // The table that was stolen
}

func (*StealTableOwnershipRequest_Failure) isStealTableOwnershipRequest_Response() {}

func (*StealTableOwnershipRequest_Success) isStealTableOwnershipRequest_Response() {}

type StealTableOwnershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the operation was successful
	Table   *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`      // The table if the operation was not successful
}

func (x *StealTableOwnershipResponse) Reset() {
	*x = StealTableOwnershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipResponse) ProtoMessage() {}

func (x *StealTableOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipResponse.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{10}
}

func (x *StealTableOwnershipResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StealTableOwnershipResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`          // The ID of the node
	NodeAddress string `protobuf:"bytes,2,opt,name=nodeAddress,proto3" json:"nodeAddress,omitempty"` // The address of the node
	NodeRegion  string `protobuf:"bytes,3,opt,name=nodeRegion,proto3" json:"nodeRegion,omitempty"`   // The region the node is in
	NodePort    int64  `protobuf:"varint,4,opt,name=nodePort,proto3" json:"nodePort,omitempty"`      // The port the node listens on
	IsActive    bool   `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`      // Whether the node is active
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{11}
}

func (x *Node) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Node) GetNodeAddress() string {
	if x != nil {
		return x.NodeAddress
	}
	return ""
}

func (x *Node) GetNodeRegion() string {
	if x != nil {
		return x.NodeRegion
	}
	return ""
}

func (x *Node) GetNodePort() int64 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

func (x *Node) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // The region name
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{12}
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProposeTopologyChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Change:
	//
	//	*ProposeTopologyChangeRequest_RegionChange
	//	*ProposeTopologyChangeRequest_NodeChange
	Change isProposeTopologyChangeRequest_Change `protobuf_oneof:"change"`
}

func (x *ProposeTopologyChangeRequest) Reset() {
	*x = ProposeTopologyChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeTopologyChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTopologyChangeRequest) ProtoMessage() {}

func (x *ProposeTopologyChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTopologyChangeRequest.ProtoReflect.Descriptor instead.
func (*ProposeTopologyChangeRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{13}
}

func (m *ProposeTopologyChangeRequest) GetChange() isProposeTopologyChangeRequest_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *ProposeTopologyChangeRequest) GetRegionChange() *ProposeRegionTopologyChange {
	if x, ok := x.GetChange().(*ProposeTopologyChangeRequest_RegionChange); ok {
		return x.RegionChange
	}
	return nil
}

func (x *ProposeTopologyChangeRequest) GetNodeChange() *ProposeNodeTopologyChange {
	if x, ok := x.GetChange().(*ProposeTopologyChangeRequest_NodeChange); ok {
		return x.NodeChange
	}
	return nil
}

type isProposeTopologyChangeRequest_Change interface {
	isProposeTopologyChangeRequest_Change()
}

type ProposeTopologyChangeRequest_RegionChange struct {
	RegionChange *ProposeRegionTopologyChange `protobuf:"bytes,1,opt,name=regionChange,proto3,oneof"` // The region to be added or removed
}

type ProposeTopologyChangeRequest_NodeChange struct {
	NodeChange *ProposeNodeTopologyChange `protobuf:"bytes,2,opt,name=nodeChange,proto3,oneof"` // The node to be added or removed
}

func (*ProposeTopologyChangeRequest_RegionChange) isProposeTopologyChangeRequest_Change() {}

func (*ProposeTopologyChangeRequest_NodeChange) isProposeTopologyChangeRequest_Change() {}

type ProposeRegionTopologyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *Region        `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`                                  // The region to be added or removed
	Kind   TopologyChange `protobuf:"varint,2,opt,name=kind,proto3,enum=atlas.consensus.TopologyChange" json:"kind,omitempty"` // The kind of change to be made
}

func (x *ProposeRegionTopologyChange) Reset() {
	*x = ProposeRegionTopologyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeRegionTopologyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeRegionTopologyChange) ProtoMessage() {}

func (x *ProposeRegionTopologyChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeRegionTopologyChange.ProtoReflect.Descriptor instead.
func (*ProposeRegionTopologyChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{14}
}

func (x *ProposeRegionTopologyChange) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *ProposeRegionTopologyChange) GetKind() TopologyChange {
	if x != nil {
		return x.Kind
	}
	return TopologyChange_UNKNOWN
}

type ProposeNodeTopologyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`                                      // The node to be added or removed
	Kind TopologyChange `protobuf:"varint,2,opt,name=kind,proto3,enum=atlas.consensus.TopologyChange" json:"kind,omitempty"` // The kind of change to be made
}

func (x *ProposeNodeTopologyChange) Reset() {
	*x = ProposeNodeTopologyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeNodeTopologyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeNodeTopologyChange) ProtoMessage() {}

func (x *ProposeNodeTopologyChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeNodeTopologyChange.ProtoReflect.Descriptor instead.
func (*ProposeNodeTopologyChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{15}
}

func (x *ProposeNodeTopologyChange) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ProposeNodeTopologyChange) GetKind() TopologyChange {
	if x != nil {
		return x.Kind
	}
	return TopologyChange_UNKNOWN
}

type PromiseTopologyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Promise bool `protobuf:"varint,1,opt,name=promise,proto3" json:"promise,omitempty"` // A promise to accept the topology change
	// Types that are assignable to Response:
	//
	//	*PromiseTopologyChange_Node
	//	*PromiseTopologyChange_Region
	Response isPromiseTopologyChange_Response `protobuf_oneof:"response"`
}

func (x *PromiseTopologyChange) Reset() {
	*x = PromiseTopologyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromiseTopologyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromiseTopologyChange) ProtoMessage() {}

func (x *PromiseTopologyChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromiseTopologyChange.ProtoReflect.Descriptor instead.
func (*PromiseTopologyChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{16}
}

func (x *PromiseTopologyChange) GetPromise() bool {
	if x != nil {
		return x.Promise
	}
	return false
}

func (m *PromiseTopologyChange) GetResponse() isPromiseTopologyChange_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *PromiseTopologyChange) GetNode() *Node {
	if x, ok := x.GetResponse().(*PromiseTopologyChange_Node); ok {
		return x.Node
	}
	return nil
}

func (x *PromiseTopologyChange) GetRegion() *Region {
	if x, ok := x.GetResponse().(*PromiseTopologyChange_Region); ok {
		return x.Region
	}
	return nil
}

type isPromiseTopologyChange_Response interface {
	isPromiseTopologyChange_Response()
}

type PromiseTopologyChange_Node struct {
	Node *Node `protobuf:"bytes,2,opt,name=node,proto3,oneof"` // The node if the promise is not accepted
}

type PromiseTopologyChange_Region struct {
	Region *Region `protobuf:"bytes,3,opt,name=region,proto3,oneof"` // The region if the promise is not accepted
}

func (*PromiseTopologyChange_Node) isPromiseTopologyChange_Response() {}

func (*PromiseTopologyChange_Region) isPromiseTopologyChange_Response() {}

type AcceptTopologyChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Change:
	//
	//	*AcceptTopologyChangeRequest_Node
	//	*AcceptTopologyChangeRequest_Region
	Change isAcceptTopologyChangeRequest_Change `protobuf_oneof:"change"`
}

func (x *AcceptTopologyChangeRequest) Reset() {
	*x = AcceptTopologyChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptTopologyChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptTopologyChangeRequest) ProtoMessage() {}

func (x *AcceptTopologyChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptTopologyChangeRequest.ProtoReflect.Descriptor instead.
func (*AcceptTopologyChangeRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{17}
}

func (m *AcceptTopologyChangeRequest) GetChange() isAcceptTopologyChangeRequest_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *AcceptTopologyChangeRequest) GetNode() *Node {
	if x, ok := x.GetChange().(*AcceptTopologyChangeRequest_Node); ok {
		return x.Node
	}
	return nil
}

func (x *AcceptTopologyChangeRequest) GetRegion() *Region {
	if x, ok := x.GetChange().(*AcceptTopologyChangeRequest_Region); ok {
		return x.Region
	}
	return nil
}

type isAcceptTopologyChangeRequest_Change interface {
	isAcceptTopologyChangeRequest_Change()
}

type AcceptTopologyChangeRequest_Node struct {
	Node *Node `protobuf:"bytes,1,opt,name=node,proto3,oneof"` // The node to be added or removed
}

type AcceptTopologyChangeRequest_Region struct {
	Region *Region `protobuf:"bytes,2,opt,name=region,proto3,oneof"` // The region to be added or removed
}

func (*AcceptTopologyChangeRequest_Node) isAcceptTopologyChangeRequest_Change() {}

func (*AcceptTopologyChangeRequest_Region) isAcceptTopologyChangeRequest_Change() {}

type AcceptedTopologyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AcceptedTopologyChange_Node
	//	*AcceptedTopologyChange_Region
	Response isAcceptedTopologyChange_Response `protobuf_oneof:"response"`
}

func (x *AcceptedTopologyChange) Reset() {
	*x = AcceptedTopologyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedTopologyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedTopologyChange) ProtoMessage() {}

func (x *AcceptedTopologyChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedTopologyChange.ProtoReflect.Descriptor instead.
func (*AcceptedTopologyChange) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{18}
}

func (m *AcceptedTopologyChange) GetResponse() isAcceptedTopologyChange_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AcceptedTopologyChange) GetNode() *Node {
	if x, ok := x.GetResponse().(*AcceptedTopologyChange_Node); ok {
		return x.Node
	}
	return nil
}

func (x *AcceptedTopologyChange) GetRegion() *Region {
	if x, ok := x.GetResponse().(*AcceptedTopologyChange_Region); ok {
		return x.Region
	}
	return nil
}

type isAcceptedTopologyChange_Response interface {
	isAcceptedTopologyChange_Response()
}

type AcceptedTopologyChange_Node struct {
	Node *Node `protobuf:"bytes,2,opt,name=node,proto3,oneof"` // The post-write node
}

type AcceptedTopologyChange_Region struct {
	Region *Region `protobuf:"bytes,3,opt,name=region,proto3,oneof"` // The post-write region
}

func (*AcceptedTopologyChange_Node) isAcceptedTopologyChange_Response() {}

func (*AcceptedTopologyChange_Region) isAcceptedTopologyChange_Response() {}

var File_consensus_consensus_proto protoreflect.FileDescriptor

var file_consensus_consensus_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a,
	0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x0d,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x66, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x42, 0x0b,
	0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x15,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x16, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf,
	0x02, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x4a, 0x0a, 0x1a, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xce, 0x01, 0x0a,
	0x1a, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe9, 0x01,
	0x0a, 0x1a, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x1b, 0x53, 0x74, 0x65,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x7b, 0x0a, 0x19,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x6d, 0x69, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x37, 0x0a, 0x10, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a,
	0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x32, 0xc6, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x70, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2c, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x13, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x2b, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_consensus_proto_rawDescOnce sync.Once
	file_consensus_consensus_proto_rawDescData = file_consensus_consensus_proto_rawDesc
)

func file_consensus_consensus_proto_rawDescGZIP() []byte {
	file_consensus_consensus_proto_rawDescOnce.Do(func() {
		file_consensus_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_consensus_proto_rawDescData)
	})
	return file_consensus_consensus_proto_rawDescData
}

var file_consensus_consensus_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_consensus_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_consensus_consensus_proto_goTypes = []interface{}{
	(ReplicationLevel)(0),                // 0: atlas.consensus.ReplicationLevel
	(TopologyChange)(0),                  // 1: atlas.consensus.TopologyChange
	(*SchemaMigration)(nil),              // 2: atlas.consensus.SchemaMigration
	(*DataMigration)(nil),                // 3: atlas.consensus.DataMigration
	(*SelfMigration)(nil),                // 4: atlas.consensus.SelfMigration
	(*Migration)(nil),                    // 5: atlas.consensus.Migration
	(*WriteMigrationRequest)(nil),        // 6: atlas.consensus.WriteMigrationRequest
	(*WriteMigrationResponse)(nil),       // 7: atlas.consensus.WriteMigrationResponse
	(*Table)(nil),                        // 8: atlas.consensus.Table
	(*StealTableOwnershipFailure)(nil),   // 9: atlas.consensus.StealTableOwnershipFailure
	(*StealTableOwnershipSuccess)(nil),   // 10: atlas.consensus.StealTableOwnershipSuccess
	(*StealTableOwnershipRequest)(nil),   // 11: atlas.consensus.StealTableOwnershipRequest
	(*StealTableOwnershipResponse)(nil),  // 12: atlas.consensus.StealTableOwnershipResponse
	(*Node)(nil),                         // 13: atlas.consensus.Node
	(*Region)(nil),                       // 14: atlas.consensus.Region
	(*ProposeTopologyChangeRequest)(nil), // 15: atlas.consensus.ProposeTopologyChangeRequest
	(*ProposeRegionTopologyChange)(nil),  // 16: atlas.consensus.ProposeRegionTopologyChange
	(*ProposeNodeTopologyChange)(nil),    // 17: atlas.consensus.ProposeNodeTopologyChange
	(*PromiseTopologyChange)(nil),        // 18: atlas.consensus.PromiseTopologyChange
	(*AcceptTopologyChangeRequest)(nil),  // 19: atlas.consensus.AcceptTopologyChangeRequest
	(*AcceptedTopologyChange)(nil),       // 20: atlas.consensus.AcceptedTopologyChange
	(*timestamppb.Timestamp)(nil),        // 21: google.protobuf.Timestamp
}
var file_consensus_consensus_proto_depIdxs = []int32{
	2,  // 0: atlas.consensus.Migration.schema:type_name -> atlas.consensus.SchemaMigration
	3,  // 1: atlas.consensus.Migration.data:type_name -> atlas.consensus.DataMigration
	4,  // 2: atlas.consensus.Migration.self:type_name -> atlas.consensus.SelfMigration
	13, // 3: atlas.consensus.WriteMigrationRequest.sender:type_name -> atlas.consensus.Node
	5,  // 4: atlas.consensus.WriteMigrationRequest.migration:type_name -> atlas.consensus.Migration
	8,  // 5: atlas.consensus.WriteMigrationResponse.table:type_name -> atlas.consensus.Table
	13, // 6: atlas.consensus.WriteMigrationResponse.leadership:type_name -> atlas.consensus.Node
	5,  // 7: atlas.consensus.WriteMigrationResponse.migrations:type_name -> atlas.consensus.Migration
	13, // 8: atlas.consensus.Table.globalOwner:type_name -> atlas.consensus.Node
	21, // 9: atlas.consensus.Table.createdAt:type_name -> google.protobuf.Timestamp
	0,  // 10: atlas.consensus.Table.replicationLevel:type_name -> atlas.consensus.ReplicationLevel
	8,  // 11: atlas.consensus.StealTableOwnershipFailure.table:type_name -> atlas.consensus.Table
	8,  // 12: atlas.consensus.StealTableOwnershipSuccess.table:type_name -> atlas.consensus.Table
	5,  // 13: atlas.consensus.StealTableOwnershipSuccess.migration:type_name -> atlas.consensus.Migration
	5,  // 14: atlas.consensus.StealTableOwnershipSuccess.missingMigrations:type_name -> atlas.consensus.Migration
	13, // 15: atlas.consensus.StealTableOwnershipRequest.sender:type_name -> atlas.consensus.Node
	9,  // 16: atlas.consensus.StealTableOwnershipRequest.failure:type_name -> atlas.consensus.StealTableOwnershipFailure
	10, // 17: atlas.consensus.StealTableOwnershipRequest.success:type_name -> atlas.consensus.StealTableOwnershipSuccess
	8,  // 18: atlas.consensus.StealTableOwnershipResponse.table:type_name -> atlas.consensus.Table
	16, // 19: atlas.consensus.ProposeTopologyChangeRequest.regionChange:type_name -> atlas.consensus.ProposeRegionTopologyChange
	17, // 20: atlas.consensus.ProposeTopologyChangeRequest.nodeChange:type_name -> atlas.consensus.ProposeNodeTopologyChange
	14, // 21: atlas.consensus.ProposeRegionTopologyChange.region:type_name -> atlas.consensus.Region
	1,  // 22: atlas.consensus.ProposeRegionTopologyChange.kind:type_name -> atlas.consensus.TopologyChange
	13, // 23: atlas.consensus.ProposeNodeTopologyChange.node:type_name -> atlas.consensus.Node
	1,  // 24: atlas.consensus.ProposeNodeTopologyChange.kind:type_name -> atlas.consensus.TopologyChange
	13, // 25: atlas.consensus.PromiseTopologyChange.node:type_name -> atlas.consensus.Node
	14, // 26: atlas.consensus.PromiseTopologyChange.region:type_name -> atlas.consensus.Region
	13, // 27: atlas.consensus.AcceptTopologyChangeRequest.node:type_name -> atlas.consensus.Node
	14, // 28: atlas.consensus.AcceptTopologyChangeRequest.region:type_name -> atlas.consensus.Region
	13, // 29: atlas.consensus.AcceptedTopologyChange.node:type_name -> atlas.consensus.Node
	14, // 30: atlas.consensus.AcceptedTopologyChange.region:type_name -> atlas.consensus.Region
	15, // 31: atlas.consensus.Consensus.ProposeTopologyChange:input_type -> atlas.consensus.ProposeTopologyChangeRequest
	19, // 32: atlas.consensus.Consensus.AcceptTopologyChange:input_type -> atlas.consensus.AcceptTopologyChangeRequest
	11, // 33: atlas.consensus.Consensus.StealTableOwnership:input_type -> atlas.consensus.StealTableOwnershipRequest
	6,  // 34: atlas.consensus.Consensus.WriteMigration:input_type -> atlas.consensus.WriteMigrationRequest
	18, // 35: atlas.consensus.Consensus.ProposeTopologyChange:output_type -> atlas.consensus.PromiseTopologyChange
	20, // 36: atlas.consensus.Consensus.AcceptTopologyChange:output_type -> atlas.consensus.AcceptedTopologyChange
	11, // 37: atlas.consensus.Consensus.StealTableOwnership:output_type -> atlas.consensus.StealTableOwnershipRequest
	7,  // 38: atlas.consensus.Consensus.WriteMigration:output_type -> atlas.consensus.WriteMigrationResponse
	35, // [35:39] is the sub-list for method output_type
	31, // [31:35] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_consensus_consensus_proto_init() }
func file_consensus_consensus_proto_init() {
	if File_consensus_consensus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_consensus_consensus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Migration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMigrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeTopologyChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeRegionTopologyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeNodeTopologyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromiseTopologyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptTopologyChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedTopologyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_consensus_consensus_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Migration_Schema)(nil),
		(*Migration_Data)(nil),
		(*Migration_Self)(nil),
	}
	file_consensus_consensus_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*StealTableOwnershipRequest_Failure)(nil),
		(*StealTableOwnershipRequest_Success)(nil),
	}
	file_consensus_consensus_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ProposeTopologyChangeRequest_RegionChange)(nil),
		(*ProposeTopologyChangeRequest_NodeChange)(nil),
	}
	file_consensus_consensus_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*PromiseTopologyChange_Node)(nil),
		(*PromiseTopologyChange_Region)(nil),
	}
	file_consensus_consensus_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*AcceptTopologyChangeRequest_Node)(nil),
		(*AcceptTopologyChangeRequest_Region)(nil),
	}
	file_consensus_consensus_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*AcceptedTopologyChange_Node)(nil),
		(*AcceptedTopologyChange_Region)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_consensus_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consensus_consensus_proto_goTypes,
		DependencyIndexes: file_consensus_consensus_proto_depIdxs,
		EnumInfos:         file_consensus_consensus_proto_enumTypes,
		MessageInfos:      file_consensus_consensus_proto_msgTypes,
	}.Build()
	File_consensus_consensus_proto = out.File
	file_consensus_consensus_proto_rawDesc = nil
	file_consensus_consensus_proto_goTypes = nil
	file_consensus_consensus_proto_depIdxs = nil
}
