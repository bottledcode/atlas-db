// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bootstrap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BootstrapClient is the client API for Bootstrap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapClient interface {
	GetBootstrapData(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (Bootstrap_GetBootstrapDataClient, error)
}

type bootstrapClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapClient(cc grpc.ClientConnInterface) BootstrapClient {
	return &bootstrapClient{cc}
}

func (c *bootstrapClient) GetBootstrapData(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (Bootstrap_GetBootstrapDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bootstrap_serviceDesc.Streams[0], "/atlas.bootstrap.Bootstrap/GetBootstrapData", opts...)
	if err != nil {
		return nil, err
	}
	x := &bootstrapGetBootstrapDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bootstrap_GetBootstrapDataClient interface {
	Recv() (*BootstrapResponse, error)
	grpc.ClientStream
}

type bootstrapGetBootstrapDataClient struct {
	grpc.ClientStream
}

func (x *bootstrapGetBootstrapDataClient) Recv() (*BootstrapResponse, error) {
	m := new(BootstrapResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BootstrapServer is the server API for Bootstrap service.
// All implementations must embed UnimplementedBootstrapServer
// for forward compatibility
type BootstrapServer interface {
	GetBootstrapData(*BootstrapRequest, Bootstrap_GetBootstrapDataServer) error
	mustEmbedUnimplementedBootstrapServer()
}

// UnimplementedBootstrapServer must be embedded to have forward compatible implementations.
type UnimplementedBootstrapServer struct {
}

func (UnimplementedBootstrapServer) GetBootstrapData(*BootstrapRequest, Bootstrap_GetBootstrapDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBootstrapData not implemented")
}
func (UnimplementedBootstrapServer) mustEmbedUnimplementedBootstrapServer() {}

// UnsafeBootstrapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServer will
// result in compilation errors.
type UnsafeBootstrapServer interface {
	mustEmbedUnimplementedBootstrapServer()
}

func RegisterBootstrapServer(s *grpc.Server, srv BootstrapServer) {
	s.RegisterService(&_Bootstrap_serviceDesc, srv)
}

func _Bootstrap_GetBootstrapData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BootstrapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BootstrapServer).GetBootstrapData(m, &bootstrapGetBootstrapDataServer{stream})
}

type Bootstrap_GetBootstrapDataServer interface {
	Send(*BootstrapResponse) error
	grpc.ServerStream
}

type bootstrapGetBootstrapDataServer struct {
	grpc.ServerStream
}

func (x *bootstrapGetBootstrapDataServer) Send(m *BootstrapResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Bootstrap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atlas.bootstrap.Bootstrap",
	HandlerType: (*BootstrapServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBootstrapData",
			Handler:       _Bootstrap_GetBootstrapData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bootstrap/bootstrap.proto",
}
