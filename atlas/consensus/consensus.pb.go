//
// This file is part of Atlas-DB.
//
// Atlas-DB is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// Atlas-DB is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Atlas-DB. If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: consensus/consensus.proto

package consensus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplicationLevel int32

const (
	ReplicationLevel_global   ReplicationLevel = 0 // Replicate the table globally
	ReplicationLevel_regional ReplicationLevel = 1 // Replicate the table within the region
	ReplicationLevel_local    ReplicationLevel = 2 // Replicate the table within the node
)

// Enum value maps for ReplicationLevel.
var (
	ReplicationLevel_name = map[int32]string{
		0: "global",
		1: "regional",
		2: "local",
	}
	ReplicationLevel_value = map[string]int32{
		"global":   0,
		"regional": 1,
		"local":    2,
	}
)

func (x ReplicationLevel) Enum() *ReplicationLevel {
	p := new(ReplicationLevel)
	*p = x
	return p
}

func (x ReplicationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[0].Descriptor()
}

func (ReplicationLevel) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[0]
}

func (x ReplicationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicationLevel.Descriptor instead.
func (ReplicationLevel) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

type TableType int32

const (
	TableType_table   TableType = 0 // The table is a regular table
	TableType_group   TableType = 1 // The table is a group meta table
	TableType_trigger TableType = 2 // The table is a trigger
	TableType_view    TableType = 3 // The table is a view
	TableType_sharded TableType = 4 // The table is sharded
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		0: "table",
		1: "group",
		2: "trigger",
		3: "view",
		4: "sharded",
	}
	TableType_value = map[string]int32{
		"table":   0,
		"group":   1,
		"trigger": 2,
		"view":    3,
		"sharded": 4,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[1].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[1]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

type StealReason int32

const (
	StealReason_queryReason  StealReason = 0 // The table was stolen due to a query
	StealReason_schemaReason StealReason = 1 // The table was stolen due to a schema change
)

// Enum value maps for StealReason.
var (
	StealReason_name = map[int32]string{
		0: "queryReason",
		1: "schemaReason",
	}
	StealReason_value = map[string]int32{
		"queryReason":  0,
		"schemaReason": 1,
	}
)

func (x StealReason) Enum() *StealReason {
	p := new(StealReason)
	*p = x
	return p
}

func (x StealReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StealReason) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_consensus_proto_enumTypes[2].Descriptor()
}

func (StealReason) Type() protoreflect.EnumType {
	return &file_consensus_consensus_proto_enumTypes[2]
}

func (x StealReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StealReason.Descriptor instead.
func (StealReason) EnumDescriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

type MigrationVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableVersion     int64  `protobuf:"varint,1,opt,name=tableVersion,proto3" json:"tableVersion,omitempty"`         // The version of the table
	MigrationVersion int64  `protobuf:"varint,2,opt,name=migrationVersion,proto3" json:"migrationVersion,omitempty"` // The version of the migration
	NodeId           int64  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`                     // The ID of the node
	TableName        string `protobuf:"bytes,4,opt,name=tableName,proto3" json:"tableName,omitempty"`                // The name of the table
}

func (x *MigrationVersion) Reset() {
	*x = MigrationVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationVersion) ProtoMessage() {}

func (x *MigrationVersion) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationVersion.ProtoReflect.Descriptor instead.
func (*MigrationVersion) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *MigrationVersion) GetTableVersion() int64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *MigrationVersion) GetMigrationVersion() int64 {
	if x != nil {
		return x.MigrationVersion
	}
	return 0
}

func (x *MigrationVersion) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *MigrationVersion) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type GossipMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MigrationRequest  *Migration        `protobuf:"bytes,1,opt,name=migrationRequest,proto3" json:"migrationRequest,omitempty"`   // The migration to be gossiped
	Table             *Table            `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`                         // The table the migration is for
	PreviousMigration *MigrationVersion `protobuf:"bytes,3,opt,name=previousMigration,proto3" json:"previousMigration,omitempty"` // The previous migration
	Ttl               int64             `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`                            // The time to live of the gossip
	Sender            *Node             `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`                       // The node sending the gossip
}

func (x *GossipMigration) Reset() {
	*x = GossipMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipMigration) ProtoMessage() {}

func (x *GossipMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipMigration.ProtoReflect.Descriptor instead.
func (*GossipMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *GossipMigration) GetMigrationRequest() *Migration {
	if x != nil {
		return x.MigrationRequest
	}
	return nil
}

func (x *GossipMigration) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GossipMigration) GetPreviousMigration() *MigrationVersion {
	if x != nil {
		return x.PreviousMigration
	}
	return nil
}

func (x *GossipMigration) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *GossipMigration) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

type JoinClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the operation was successful
	Table   *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`      // The current node table if the requested node is not the owner
	NodeId  int64  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`   // The ID of the newly joined node
}

func (x *JoinClusterResponse) Reset() {
	*x = JoinClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinClusterResponse) ProtoMessage() {}

func (x *JoinClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinClusterResponse.ProtoReflect.Descriptor instead.
func (*JoinClusterResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *JoinClusterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinClusterResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *JoinClusterResponse) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type SchemaMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"` // The commands to be executed
}

func (x *SchemaMigration) Reset() {
	*x = SchemaMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMigration) ProtoMessage() {}

func (x *SchemaMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMigration.ProtoReflect.Descriptor instead.
func (*SchemaMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *SchemaMigration) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type DataMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session [][]byte `protobuf:"bytes,1,rep,name=session,proto3" json:"session,omitempty"` // The data to be written
}

func (x *DataMigration) Reset() {
	*x = DataMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMigration) ProtoMessage() {}

func (x *DataMigration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMigration.ProtoReflect.Descriptor instead.
func (*DataMigration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *DataMigration) GetSession() [][]byte {
	if x != nil {
		return x.Session
	}
	return nil
}

type Migration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *MigrationVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // The version of the migration
	// Types that are assignable to Migration:
	//
	//	*Migration_Schema
	//	*Migration_Data
	Migration isMigration_Migration `protobuf_oneof:"migration"`
}

func (x *Migration) Reset() {
	*x = Migration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Migration) ProtoMessage() {}

func (x *Migration) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Migration.ProtoReflect.Descriptor instead.
func (*Migration) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *Migration) GetVersion() *MigrationVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (m *Migration) GetMigration() isMigration_Migration {
	if m != nil {
		return m.Migration
	}
	return nil
}

func (x *Migration) GetSchema() *SchemaMigration {
	if x, ok := x.GetMigration().(*Migration_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *Migration) GetData() *DataMigration {
	if x, ok := x.GetMigration().(*Migration_Data); ok {
		return x.Data
	}
	return nil
}

type isMigration_Migration interface {
	isMigration_Migration()
}

type Migration_Schema struct {
	Schema *SchemaMigration `protobuf:"bytes,2,opt,name=schema,proto3,oneof"` // The schema migration
}

type Migration_Data struct {
	Data *DataMigration `protobuf:"bytes,3,opt,name=data,proto3,oneof"` // The data migration
}

func (*Migration_Schema) isMigration_Migration() {}

func (*Migration_Data) isMigration_Migration() {}

type WriteMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    *Node      `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`       // The node sending the migration
	Migration *Migration `protobuf:"bytes,2,opt,name=migration,proto3" json:"migration,omitempty"` // The migration to be written
}

func (x *WriteMigrationRequest) Reset() {
	*x = WriteMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationRequest) ProtoMessage() {}

func (x *WriteMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationRequest.ProtoReflect.Descriptor instead.
func (*WriteMigrationRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *WriteMigrationRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *WriteMigrationRequest) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

type WriteMigrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the operation was successful
	Table   *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`      // The table if the operation was not successful
}

func (x *WriteMigrationResponse) Reset() {
	*x = WriteMigrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationResponse) ProtoMessage() {}

func (x *WriteMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationResponse.ProtoReflect.Descriptor instead.
func (*WriteMigrationResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *WriteMigrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WriteMigrationResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type Principal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // The name of the principle
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // The value of the principle
}

func (x *Principal) Reset() {
	*x = Principal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Principal) ProtoMessage() {}

func (x *Principal) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Principal.ProtoReflect.Descriptor instead.
func (*Principal) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *Principal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Principal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table      *Table       `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`           // The table the shard belongs to
	Shard      *Table       `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`           // The shard table
	Principals []*Principal `protobuf:"bytes,3,rep,name=principals,proto3" json:"principals,omitempty"` // The principles the shard is sharded by
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *Shard) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Shard) GetShard() *Table {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *Shard) GetPrincipals() []*Principal {
	if x != nil {
		return x.Principals
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                // The name of the table
	ReplicationLevel  ReplicationLevel       `protobuf:"varint,2,opt,name=replicationLevel,proto3,enum=atlas.consensus.ReplicationLevel" json:"replicationLevel,omitempty"` // The replication level of the table
	Owner             *Node                  `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`                                                              // The global owner of the table
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                                                      // The time the table was created
	Version           int64                  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`                                                         // The version of the table
	AllowedRegions    []string               `protobuf:"bytes,6,rep,name=allowedRegions,proto3" json:"allowedRegions,omitempty"`                                            // The regions the table data can be replicated to
	RestrictedRegions []string               `protobuf:"bytes,7,rep,name=restrictedRegions,proto3" json:"restrictedRegions,omitempty"`                                      // The regions the table data cannot be replicated to
	Group             string                 `protobuf:"bytes,9,opt,name=group,proto3" json:"group,omitempty"`                                                              // The group the table belongs to
	Type              TableType              `protobuf:"varint,10,opt,name=type,proto3,enum=atlas.consensus.TableType" json:"type,omitempty"`                               // The type of the table
	ShardPrincipals   []string               `protobuf:"bytes,11,rep,name=shardPrincipals,proto3" json:"shardPrincipals,omitempty"`                                         // The principles the table is sharded by
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{10}
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetReplicationLevel() ReplicationLevel {
	if x != nil {
		return x.ReplicationLevel
	}
	return ReplicationLevel_global
}

func (x *Table) GetOwner() *Node {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Table) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Table) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Table) GetAllowedRegions() []string {
	if x != nil {
		return x.AllowedRegions
	}
	return nil
}

func (x *Table) GetRestrictedRegions() []string {
	if x != nil {
		return x.RestrictedRegions
	}
	return nil
}

func (x *Table) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Table) GetType() TableType {
	if x != nil {
		return x.Type
	}
	return TableType_table
}

func (x *Table) GetShardPrincipals() []string {
	if x != nil {
		return x.ShardPrincipals
	}
	return nil
}

type TableGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *Table   `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"` // The details of the group
	Tables  []*Table `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`   // The tables in the group
}

func (x *TableGroup) Reset() {
	*x = TableGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableGroup) ProtoMessage() {}

func (x *TableGroup) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableGroup.ProtoReflect.Descriptor instead.
func (*TableGroup) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{11}
}

func (x *TableGroup) GetDetails() *Table {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TableGroup) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

type StealTableOwnershipFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *Table `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"` // The table that was not stolen
}

func (x *StealTableOwnershipFailure) Reset() {
	*x = StealTableOwnershipFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipFailure) ProtoMessage() {}

func (x *StealTableOwnershipFailure) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipFailure.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipFailure) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{12}
}

func (x *StealTableOwnershipFailure) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type StealTableOwnershipSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table             *Table       `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`                         // The table that was stolen
	MissingMigrations []*Migration `protobuf:"bytes,2,rep,name=missingMigrations,proto3" json:"missingMigrations,omitempty"` // The missing migrations, if any
}

func (x *StealTableOwnershipSuccess) Reset() {
	*x = StealTableOwnershipSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipSuccess) ProtoMessage() {}

func (x *StealTableOwnershipSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipSuccess.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipSuccess) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{13}
}

func (x *StealTableOwnershipSuccess) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *StealTableOwnershipSuccess) GetMissingMigrations() []*Migration {
	if x != nil {
		return x.MissingMigrations
	}
	return nil
}

type StealTableOwnershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender *Node       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`                                   // The node sending the request
	Reason StealReason `protobuf:"varint,4,opt,name=reason,proto3,enum=atlas.consensus.StealReason" json:"reason,omitempty"` // The reason the table was stolen
	Table  *Table      `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`                                     // The table to be stolen
}

func (x *StealTableOwnershipRequest) Reset() {
	*x = StealTableOwnershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipRequest) ProtoMessage() {}

func (x *StealTableOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipRequest.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{14}
}

func (x *StealTableOwnershipRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *StealTableOwnershipRequest) GetReason() StealReason {
	if x != nil {
		return x.Reason
	}
	return StealReason_queryReason
}

func (x *StealTableOwnershipRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type StealTableOwnershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Promised bool `protobuf:"varint,1,opt,name=promised,proto3" json:"promised,omitempty"` // Whether the operation was successful
	// Types that are assignable to Response:
	//
	//	*StealTableOwnershipResponse_Failure
	//	*StealTableOwnershipResponse_Success
	Response isStealTableOwnershipResponse_Response `protobuf_oneof:"response"`
}

func (x *StealTableOwnershipResponse) Reset() {
	*x = StealTableOwnershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StealTableOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipResponse) ProtoMessage() {}

func (x *StealTableOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipResponse.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{15}
}

func (x *StealTableOwnershipResponse) GetPromised() bool {
	if x != nil {
		return x.Promised
	}
	return false
}

func (m *StealTableOwnershipResponse) GetResponse() isStealTableOwnershipResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StealTableOwnershipResponse) GetFailure() *StealTableOwnershipFailure {
	if x, ok := x.GetResponse().(*StealTableOwnershipResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *StealTableOwnershipResponse) GetSuccess() *StealTableOwnershipSuccess {
	if x, ok := x.GetResponse().(*StealTableOwnershipResponse_Success); ok {
		return x.Success
	}
	return nil
}

type isStealTableOwnershipResponse_Response interface {
	isStealTableOwnershipResponse_Response()
}

type StealTableOwnershipResponse_Failure struct {
	Failure *StealTableOwnershipFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"` // The table that was not stolen
}

type StealTableOwnershipResponse_Success struct {
	Success *StealTableOwnershipSuccess `protobuf:"bytes,3,opt,name=success,proto3,oneof"` // The table that was stolen
}

func (*StealTableOwnershipResponse_Failure) isStealTableOwnershipResponse_Response() {}

func (*StealTableOwnershipResponse_Success) isStealTableOwnershipResponse_Response() {}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          // The ID of the node
	Address string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // The address of the node
	Region  *Region              `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`   // The region the node is in
	Port    int64                `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`      // The port the node listens on
	Active  bool                 `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`  // Whether the node is active
	Rtt     *durationpb.Duration `protobuf:"bytes,6,opt,name=rtt,proto3" json:"rtt,omitempty"`         // The round trip time to the node
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{16}
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Node) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Node) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Node) GetRtt() *durationpb.Duration {
	if x != nil {
		return x.Rtt
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // The region name
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_consensus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{17}
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_consensus_consensus_proto protoreflect.FileDescriptor

var file_consensus_consensus_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x0f, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4f, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x22, 0x75, 0x0a, 0x13, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0b, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a,
	0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x60, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x35, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x05, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x3a,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x22, 0x6e,
	0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4a,
	0x0a, 0x1a, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x53,
	0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x01,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a,
	0x03, 0x72, 0x74, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x74, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x37, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10,
	0x02, 0x2a, 0x45, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x30, 0x0a, 0x0b, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x01, 0x32, 0xcd, 0x03, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x2b, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x65, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x24, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x20,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_consensus_proto_rawDescOnce sync.Once
	file_consensus_consensus_proto_rawDescData = file_consensus_consensus_proto_rawDesc
)

func file_consensus_consensus_proto_rawDescGZIP() []byte {
	file_consensus_consensus_proto_rawDescOnce.Do(func() {
		file_consensus_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_consensus_proto_rawDescData)
	})
	return file_consensus_consensus_proto_rawDescData
}

var file_consensus_consensus_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_consensus_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_consensus_consensus_proto_goTypes = []interface{}{
	(ReplicationLevel)(0),               // 0: atlas.consensus.ReplicationLevel
	(TableType)(0),                      // 1: atlas.consensus.TableType
	(StealReason)(0),                    // 2: atlas.consensus.StealReason
	(*MigrationVersion)(nil),            // 3: atlas.consensus.MigrationVersion
	(*GossipMigration)(nil),             // 4: atlas.consensus.GossipMigration
	(*JoinClusterResponse)(nil),         // 5: atlas.consensus.JoinClusterResponse
	(*SchemaMigration)(nil),             // 6: atlas.consensus.SchemaMigration
	(*DataMigration)(nil),               // 7: atlas.consensus.DataMigration
	(*Migration)(nil),                   // 8: atlas.consensus.Migration
	(*WriteMigrationRequest)(nil),       // 9: atlas.consensus.WriteMigrationRequest
	(*WriteMigrationResponse)(nil),      // 10: atlas.consensus.WriteMigrationResponse
	(*Principal)(nil),                   // 11: atlas.consensus.Principal
	(*Shard)(nil),                       // 12: atlas.consensus.Shard
	(*Table)(nil),                       // 13: atlas.consensus.Table
	(*TableGroup)(nil),                  // 14: atlas.consensus.TableGroup
	(*StealTableOwnershipFailure)(nil),  // 15: atlas.consensus.StealTableOwnershipFailure
	(*StealTableOwnershipSuccess)(nil),  // 16: atlas.consensus.StealTableOwnershipSuccess
	(*StealTableOwnershipRequest)(nil),  // 17: atlas.consensus.StealTableOwnershipRequest
	(*StealTableOwnershipResponse)(nil), // 18: atlas.consensus.StealTableOwnershipResponse
	(*Node)(nil),                        // 19: atlas.consensus.Node
	(*Region)(nil),                      // 20: atlas.consensus.Region
	(*timestamppb.Timestamp)(nil),       // 21: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),         // 22: google.protobuf.Duration
	(*emptypb.Empty)(nil),               // 23: google.protobuf.Empty
}
var file_consensus_consensus_proto_depIdxs = []int32{
	8,  // 0: atlas.consensus.GossipMigration.migrationRequest:type_name -> atlas.consensus.Migration
	13, // 1: atlas.consensus.GossipMigration.table:type_name -> atlas.consensus.Table
	3,  // 2: atlas.consensus.GossipMigration.previousMigration:type_name -> atlas.consensus.MigrationVersion
	19, // 3: atlas.consensus.GossipMigration.sender:type_name -> atlas.consensus.Node
	13, // 4: atlas.consensus.JoinClusterResponse.table:type_name -> atlas.consensus.Table
	3,  // 5: atlas.consensus.Migration.version:type_name -> atlas.consensus.MigrationVersion
	6,  // 6: atlas.consensus.Migration.schema:type_name -> atlas.consensus.SchemaMigration
	7,  // 7: atlas.consensus.Migration.data:type_name -> atlas.consensus.DataMigration
	19, // 8: atlas.consensus.WriteMigrationRequest.sender:type_name -> atlas.consensus.Node
	8,  // 9: atlas.consensus.WriteMigrationRequest.migration:type_name -> atlas.consensus.Migration
	13, // 10: atlas.consensus.WriteMigrationResponse.table:type_name -> atlas.consensus.Table
	13, // 11: atlas.consensus.Shard.table:type_name -> atlas.consensus.Table
	13, // 12: atlas.consensus.Shard.shard:type_name -> atlas.consensus.Table
	11, // 13: atlas.consensus.Shard.principals:type_name -> atlas.consensus.Principal
	0,  // 14: atlas.consensus.Table.replicationLevel:type_name -> atlas.consensus.ReplicationLevel
	19, // 15: atlas.consensus.Table.owner:type_name -> atlas.consensus.Node
	21, // 16: atlas.consensus.Table.createdAt:type_name -> google.protobuf.Timestamp
	1,  // 17: atlas.consensus.Table.type:type_name -> atlas.consensus.TableType
	13, // 18: atlas.consensus.TableGroup.details:type_name -> atlas.consensus.Table
	13, // 19: atlas.consensus.TableGroup.tables:type_name -> atlas.consensus.Table
	13, // 20: atlas.consensus.StealTableOwnershipFailure.table:type_name -> atlas.consensus.Table
	13, // 21: atlas.consensus.StealTableOwnershipSuccess.table:type_name -> atlas.consensus.Table
	8,  // 22: atlas.consensus.StealTableOwnershipSuccess.missingMigrations:type_name -> atlas.consensus.Migration
	19, // 23: atlas.consensus.StealTableOwnershipRequest.sender:type_name -> atlas.consensus.Node
	2,  // 24: atlas.consensus.StealTableOwnershipRequest.reason:type_name -> atlas.consensus.StealReason
	13, // 25: atlas.consensus.StealTableOwnershipRequest.table:type_name -> atlas.consensus.Table
	15, // 26: atlas.consensus.StealTableOwnershipResponse.failure:type_name -> atlas.consensus.StealTableOwnershipFailure
	16, // 27: atlas.consensus.StealTableOwnershipResponse.success:type_name -> atlas.consensus.StealTableOwnershipSuccess
	20, // 28: atlas.consensus.Node.region:type_name -> atlas.consensus.Region
	22, // 29: atlas.consensus.Node.rtt:type_name -> google.protobuf.Duration
	17, // 30: atlas.consensus.Consensus.StealTableOwnership:input_type -> atlas.consensus.StealTableOwnershipRequest
	9,  // 31: atlas.consensus.Consensus.WriteMigration:input_type -> atlas.consensus.WriteMigrationRequest
	9,  // 32: atlas.consensus.Consensus.AcceptMigration:input_type -> atlas.consensus.WriteMigrationRequest
	19, // 33: atlas.consensus.Consensus.JoinCluster:input_type -> atlas.consensus.Node
	4,  // 34: atlas.consensus.Consensus.Gossip:input_type -> atlas.consensus.GossipMigration
	18, // 35: atlas.consensus.Consensus.StealTableOwnership:output_type -> atlas.consensus.StealTableOwnershipResponse
	10, // 36: atlas.consensus.Consensus.WriteMigration:output_type -> atlas.consensus.WriteMigrationResponse
	23, // 37: atlas.consensus.Consensus.AcceptMigration:output_type -> google.protobuf.Empty
	5,  // 38: atlas.consensus.Consensus.JoinCluster:output_type -> atlas.consensus.JoinClusterResponse
	23, // 39: atlas.consensus.Consensus.Gossip:output_type -> google.protobuf.Empty
	35, // [35:40] is the sub-list for method output_type
	30, // [30:35] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_consensus_consensus_proto_init() }
func file_consensus_consensus_proto_init() {
	if File_consensus_consensus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_consensus_consensus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Migration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMigrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Principal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StealTableOwnershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_consensus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_consensus_consensus_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Migration_Schema)(nil),
		(*Migration_Data)(nil),
	}
	file_consensus_consensus_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*StealTableOwnershipResponse_Failure)(nil),
		(*StealTableOwnershipResponse_Success)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_consensus_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consensus_consensus_proto_goTypes,
		DependencyIndexes: file_consensus_consensus_proto_depIdxs,
		EnumInfos:         file_consensus_consensus_proto_enumTypes,
		MessageInfos:      file_consensus_consensus_proto_msgTypes,
	}.Build()
	File_consensus_consensus_proto = out.File
	file_consensus_consensus_proto_rawDesc = nil
	file_consensus_consensus_proto_goTypes = nil
	file_consensus_consensus_proto_depIdxs = nil
}
