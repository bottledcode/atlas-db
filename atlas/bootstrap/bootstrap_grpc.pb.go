//
// This file is part of Atlas-DB.
//
// Atlas-DB is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// Atlas-DB is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Atlas-DB. If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: bootstrap/bootstrap.proto

package bootstrap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bootstrap_GetBootstrapData_FullMethodName = "/atlas.bootstrap.Bootstrap/GetBootstrapData"
)

// BootstrapClient is the client API for Bootstrap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapClient interface {
	GetBootstrapData(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BootstrapResponse], error)
}

type bootstrapClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapClient(cc grpc.ClientConnInterface) BootstrapClient {
	return &bootstrapClient{cc}
}

func (c *bootstrapClient) GetBootstrapData(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BootstrapResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Bootstrap_ServiceDesc.Streams[0], Bootstrap_GetBootstrapData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BootstrapRequest, BootstrapResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bootstrap_GetBootstrapDataClient = grpc.ServerStreamingClient[BootstrapResponse]

// BootstrapServer is the server API for Bootstrap service.
// All implementations must embed UnimplementedBootstrapServer
// for forward compatibility.
type BootstrapServer interface {
	GetBootstrapData(*BootstrapRequest, grpc.ServerStreamingServer[BootstrapResponse]) error
	mustEmbedUnimplementedBootstrapServer()
}

// UnimplementedBootstrapServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBootstrapServer struct{}

func (UnimplementedBootstrapServer) GetBootstrapData(*BootstrapRequest, grpc.ServerStreamingServer[BootstrapResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetBootstrapData not implemented")
}
func (UnimplementedBootstrapServer) mustEmbedUnimplementedBootstrapServer() {}
func (UnimplementedBootstrapServer) testEmbeddedByValue()                   {}

// UnsafeBootstrapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServer will
// result in compilation errors.
type UnsafeBootstrapServer interface {
	mustEmbedUnimplementedBootstrapServer()
}

func RegisterBootstrapServer(s grpc.ServiceRegistrar, srv BootstrapServer) {
	// If the following call pancis, it indicates UnimplementedBootstrapServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bootstrap_ServiceDesc, srv)
}

func _Bootstrap_GetBootstrapData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BootstrapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BootstrapServer).GetBootstrapData(m, &grpc.GenericServerStream[BootstrapRequest, BootstrapResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bootstrap_GetBootstrapDataServer = grpc.ServerStreamingServer[BootstrapResponse]

// Bootstrap_ServiceDesc is the grpc.ServiceDesc for Bootstrap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bootstrap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atlas.bootstrap.Bootstrap",
	HandlerType: (*BootstrapServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBootstrapData",
			Handler:       _Bootstrap_GetBootstrapData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bootstrap/bootstrap.proto",
}
