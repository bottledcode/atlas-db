syntax = "proto3";

package atlas.consensus;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option go_package = "/consensus";

service Consensus {
  rpc StealTableOwnership(StealTableOwnershipRequest) returns (StealTableOwnershipResponse) {}
  rpc WriteMigration(WriteMigrationRequest) returns (WriteMigrationResponse) {}
  rpc AcceptMigration(WriteMigrationRequest) returns (google.protobuf.Empty) {}
  rpc LearnMigration(LearnMigrationRequest) returns (stream Migration) {}
  rpc JoinCluster(Node) returns (JoinClusterResponse) {}
}

message JoinClusterResponse {
  bool success = 1; // Whether the operation was successful
  Table table = 2; // The current node table if the requested node is not the owner
  int64 nodeId = 3; // The ID of the newly joined node
}

message LearnMigrationRequest {
  int64 tableId = 1; // the id of the table
  int64 ownVersion = 2; // the most known version of the table
  int64 versionBounds = 3; // the version bounds for a batch of migrations
  google.protobuf.Duration maxTime = 4; // the maximum time to wait for a batch of migrations
}

message SchemaMigration {
  repeated string commands = 1; // The commands to be executed
}

message DataMigration {
  repeated bytes session = 1; // The data to be written
}

message Migration {
  string tableId = 1; // The id of the table (aka, ballot)
  int64 version = 2; // The version of the table (aka, slot)
  oneof migration {
    SchemaMigration schema = 3; // The schema migration
    DataMigration data = 4; // The data migration
  }
}

message WriteMigrationRequest {
  string tableId = 1; // The ID of the table
  int64 tableVersion = 2; // The version of the table
  Node sender = 3; // The node sending the migration
  Migration migration = 4; // The migration to be written
}

message WriteMigrationResponse {
  bool success = 1; // Whether the operation was successful
  Table table = 2; // The table if the operation was not successful
}

enum ReplicationLevel {
  global = 0; // Replicate the table globally
  regional = 1; // Replicate the table within the region
  local = 2; // Replicate the table within the node
}

message Table {
  string name = 1; // The name of the table
  ReplicationLevel replicationLevel = 2; // The replication level of the table
  Node owner = 3; // The global owner of the table
  google.protobuf.Timestamp createdAt = 4; // The time the table was created
  int64 version = 5; // The version of the table
  repeated string allowedRegions = 6; // The regions the table data can be replicated to
  repeated string restrictedRegions = 7; // The regions the table data cannot be replicated to
}

message StealTableOwnershipFailure {
  Table table = 1; // The table that was not stolen
}

message StealTableOwnershipSuccess {
  Table table = 1; // The table that was stolen
  repeated Migration missingMigrations = 2; // The missing migrations, if any
}

enum StealReason {
  queryReason = 0; // The table was stolen due to a query
  schemaReason = 1; // The table was stolen due to a schema change
}

message StealTableOwnershipRequest {
  Node sender = 1; // The node sending the request
  StealReason reason = 4; // The reason the table was stolen
  Table table = 2; // The table to be stolen
}

message StealTableOwnershipResponse {
  bool promised = 1; // Whether the operation was successful
  oneof response {
    StealTableOwnershipFailure failure = 2; // The table that was not stolen
    StealTableOwnershipSuccess success = 3; // The table that was stolen
  }
}

message Node {
  int64 id = 1; // The ID of the node
  string address = 2;  // The address of the node
  Region region = 3; // The region the node is in
  int64 port = 4; // The port the node listens on
  bool active = 5; // Whether the node is active
  google.protobuf.Duration rtt = 6; // The round trip time to the node
}

message Region {
  string name = 1; // The region name
}
