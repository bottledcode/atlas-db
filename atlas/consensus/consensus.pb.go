//
// This file is part of Atlas-DB.
//
// Atlas-DB is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.
//
// Atlas-DB is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Atlas-DB. If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: consensus/consensus.proto

package consensus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *Data                  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationRequest) Reset() {
	*x = ReplicationRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationRequest) ProtoMessage() {}

func (x *ReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationRequest.ProtoReflect.Descriptor instead.
func (*ReplicationRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicationRequest) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Committed     bool                   `protobuf:"varint,1,opt,name=committed,proto3" json:"committed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationResponse) Reset() {
	*x = ReplicationResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationResponse) ProtoMessage() {}

func (x *ReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationResponse.ProtoReflect.Descriptor instead.
func (*ReplicationResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicationResponse) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

type DereferenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reference     *DataReference         `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DereferenceRequest) Reset() {
	*x = DereferenceRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DereferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceRequest) ProtoMessage() {}

func (x *DereferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceRequest.ProtoReflect.Descriptor instead.
func (*DereferenceRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *DereferenceRequest) GetReference() *DataReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

type DereferenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *Data                  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DereferenceResponse) Reset() {
	*x = DereferenceResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DereferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceResponse) ProtoMessage() {}

func (x *DereferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceResponse.ProtoReflect.Descriptor instead.
func (*DereferenceResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *DereferenceResponse) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// Ping messages for health checks
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeId  int64                  `protobuf:"varint,1,opt,name=sender_node_id,json=senderNodeId,proto3" json:"sender_node_id,omitempty"` // The ID of the node sending the ping
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                              // Timestamp of the ping
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *PingRequest) GetSenderNodeId() int64 {
	if x != nil {
		return x.SenderNodeId
	}
	return 0
}

func (x *PingRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type PingResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                          // Whether the ping was successful
	ResponderNodeId int64                  `protobuf:"varint,2,opt,name=responder_node_id,json=responderNodeId,proto3" json:"responder_node_id,omitempty"` // The ID of the node responding
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                       // Timestamp of the response
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *PingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PingResponse) GetResponderNodeId() int64 {
	if x != nil {
		return x.ResponderNodeId
	}
	return 0
}

func (x *PingResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Slot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Id            uint64                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Node          uint64                 `protobuf:"varint,3,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slot) Reset() {
	*x = Slot{}
	mi := &file_consensus_consensus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *Slot) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Slot) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Slot) GetNode() uint64 {
	if x != nil {
		return x.Node
	}
	return 0
}

type Ballot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Id            uint64                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Node          uint64                 `protobuf:"varint,3,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ballot) Reset() {
	*x = Ballot{}
	mi := &file_consensus_consensus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ballot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ballot) ProtoMessage() {}

func (x *Ballot) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ballot.ProtoReflect.Descriptor instead.
func (*Ballot) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *Ballot) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Ballot) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ballot) GetNode() uint64 {
	if x != nil {
		return x.Node
	}
	return 0
}

type Principal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Principal) Reset() {
	*x = Principal{}
	mi := &file_consensus_consensus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Principal) ProtoMessage() {}

func (x *Principal) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Principal.ProtoReflect.Descriptor instead.
func (*Principal) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *Principal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Principal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Chunk         uint64                 `protobuf:"varint,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_consensus_consensus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *Data) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Data) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Data) GetChunk() uint64 {
	if x != nil {
		return x.Chunk
	}
	return 0
}

type DataReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataReference) Reset() {
	*x = DataReference{}
	mi := &file_consensus_consensus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataReference) ProtoMessage() {}

func (x *DataReference) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataReference.ProtoReflect.Descriptor instead.
func (*DataReference) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{10}
}

func (x *DataReference) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type Deletion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deletion) Reset() {
	*x = Deletion{}
	mi := &file_consensus_consensus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deletion) ProtoMessage() {}

func (x *Deletion) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deletion.ProtoReflect.Descriptor instead.
func (*Deletion) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{11}
}

type Noop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Noop) Reset() {
	*x = Noop{}
	mi := &file_consensus_consensus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Noop) ProtoMessage() {}

func (x *Noop) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Noop.ProtoReflect.Descriptor instead.
func (*Noop) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{12}
}

type Acl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owners        []*Principal           `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty"`
	Readers       []*Principal           `protobuf:"bytes,2,rep,name=readers,proto3" json:"readers,omitempty"`
	Writers       []*Principal           `protobuf:"bytes,3,rep,name=writers,proto3" json:"writers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Acl) Reset() {
	*x = Acl{}
	mi := &file_consensus_consensus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Acl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acl) ProtoMessage() {}

func (x *Acl) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acl.ProtoReflect.Descriptor instead.
func (*Acl) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{13}
}

func (x *Acl) GetOwners() []*Principal {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Acl) GetReaders() []*Principal {
	if x != nil {
		return x.Readers
	}
	return nil
}

func (x *Acl) GetWriters() []*Principal {
	if x != nil {
		return x.Writers
	}
	return nil
}

type RecordMutation struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Slot   *Slot                  `protobuf:"bytes,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Ballot *Ballot                `protobuf:"bytes,8,opt,name=ballot,proto3" json:"ballot,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*RecordMutation_ValueAddress
	//	*RecordMutation_Tombstone
	//	*RecordMutation_AclUpdated
	//	*RecordMutation_Compaction
	//	*RecordMutation_Noop
	Message       isRecordMutation_Message `protobuf_oneof:"message"`
	Committed     bool                     `protobuf:"varint,7,opt,name=committed,proto3" json:"committed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordMutation) Reset() {
	*x = RecordMutation{}
	mi := &file_consensus_consensus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMutation) ProtoMessage() {}

func (x *RecordMutation) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMutation.ProtoReflect.Descriptor instead.
func (*RecordMutation) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{14}
}

func (x *RecordMutation) GetSlot() *Slot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *RecordMutation) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

func (x *RecordMutation) GetMessage() isRecordMutation_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RecordMutation) GetValueAddress() *DataReference {
	if x != nil {
		if x, ok := x.Message.(*RecordMutation_ValueAddress); ok {
			return x.ValueAddress
		}
	}
	return nil
}

func (x *RecordMutation) GetTombstone() *Deletion {
	if x != nil {
		if x, ok := x.Message.(*RecordMutation_Tombstone); ok {
			return x.Tombstone
		}
	}
	return nil
}

func (x *RecordMutation) GetAclUpdated() *Acl {
	if x != nil {
		if x, ok := x.Message.(*RecordMutation_AclUpdated); ok {
			return x.AclUpdated
		}
	}
	return nil
}

func (x *RecordMutation) GetCompaction() *Record {
	if x != nil {
		if x, ok := x.Message.(*RecordMutation_Compaction); ok {
			return x.Compaction
		}
	}
	return nil
}

func (x *RecordMutation) GetNoop() *Noop {
	if x != nil {
		if x, ok := x.Message.(*RecordMutation_Noop); ok {
			return x.Noop
		}
	}
	return nil
}

func (x *RecordMutation) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

type isRecordMutation_Message interface {
	isRecordMutation_Message()
}

type RecordMutation_ValueAddress struct {
	ValueAddress *DataReference `protobuf:"bytes,2,opt,name=valueAddress,proto3,oneof"`
}

type RecordMutation_Tombstone struct {
	Tombstone *Deletion `protobuf:"bytes,3,opt,name=tombstone,proto3,oneof"`
}

type RecordMutation_AclUpdated struct {
	AclUpdated *Acl `protobuf:"bytes,4,opt,name=aclUpdated,proto3,oneof"`
}

type RecordMutation_Compaction struct {
	Compaction *Record `protobuf:"bytes,5,opt,name=compaction,proto3,oneof"`
}

type RecordMutation_Noop struct {
	Noop *Noop `protobuf:"bytes,6,opt,name=noop,proto3,oneof"`
}

func (*RecordMutation_ValueAddress) isRecordMutation_Message() {}

func (*RecordMutation_Tombstone) isRecordMutation_Message() {}

func (*RecordMutation_AclUpdated) isRecordMutation_Message() {}

func (*RecordMutation_Compaction) isRecordMutation_Message() {}

func (*RecordMutation_Noop) isRecordMutation_Message() {}

type Record struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DerivedFrom   *Slot                  `protobuf:"bytes,1,opt,name=derivedFrom,proto3" json:"derivedFrom,omitempty"`
	Acl           *Acl                   `protobuf:"bytes,2,opt,name=acl,proto3" json:"acl,omitempty"`
	Data          *DataReference         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_consensus_consensus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{15}
}

func (x *Record) GetDerivedFrom() *Slot {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *Record) GetAcl() *Acl {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *Record) GetData() *DataReference {
	if x != nil {
		return x.Data
	}
	return nil
}

// ownership messages
type StealTableOwnershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ballot        *Ballot                `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StealTableOwnershipRequest) Reset() {
	*x = StealTableOwnershipRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StealTableOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipRequest) ProtoMessage() {}

func (x *StealTableOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipRequest.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{16}
}

func (x *StealTableOwnershipRequest) GetBallot() *Ballot {
	if x != nil {
		return x.Ballot
	}
	return nil
}

type StealTableOwnershipResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Promised       bool                   `protobuf:"varint,1,opt,name=promised,proto3" json:"promised,omitempty"`
	MissingRecords []*RecordMutation      `protobuf:"bytes,2,rep,name=missingRecords,proto3" json:"missingRecords,omitempty"`
	HighestBallot  *Ballot                `protobuf:"bytes,3,opt,name=highestBallot,proto3" json:"highestBallot,omitempty"`
	HighestSlot    *RecordMutation        `protobuf:"bytes,4,opt,name=highestSlot,proto3" json:"highestSlot,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StealTableOwnershipResponse) Reset() {
	*x = StealTableOwnershipResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StealTableOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StealTableOwnershipResponse) ProtoMessage() {}

func (x *StealTableOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StealTableOwnershipResponse.ProtoReflect.Descriptor instead.
func (*StealTableOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{17}
}

func (x *StealTableOwnershipResponse) GetPromised() bool {
	if x != nil {
		return x.Promised
	}
	return false
}

func (x *StealTableOwnershipResponse) GetMissingRecords() []*RecordMutation {
	if x != nil {
		return x.MissingRecords
	}
	return nil
}

func (x *StealTableOwnershipResponse) GetHighestBallot() *Ballot {
	if x != nil {
		return x.HighestBallot
	}
	return nil
}

func (x *StealTableOwnershipResponse) GetHighestSlot() *RecordMutation {
	if x != nil {
		return x.HighestSlot
	}
	return nil
}

type WriteMigrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *RecordMutation        `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMigrationRequest) Reset() {
	*x = WriteMigrationRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationRequest) ProtoMessage() {}

func (x *WriteMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationRequest.ProtoReflect.Descriptor instead.
func (*WriteMigrationRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{18}
}

func (x *WriteMigrationRequest) GetRecord() *RecordMutation {
	if x != nil {
		return x.Record
	}
	return nil
}

type WriteMigrationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMigrationResponse) Reset() {
	*x = WriteMigrationResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMigrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMigrationResponse) ProtoMessage() {}

func (x *WriteMigrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMigrationResponse.ProtoReflect.Descriptor instead.
func (*WriteMigrationResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{19}
}

func (x *WriteMigrationResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type OwnershipTracking struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Promised         *Ballot                `protobuf:"bytes,1,opt,name=promised,proto3" json:"promised,omitempty"`                  // highest ballot promised
	Owned            bool                   `protobuf:"varint,2,opt,name=owned,proto3" json:"owned,omitempty"`                       // am I the owner of this?
	NextSlot         uint64                 `protobuf:"varint,3,opt,name=nextSlot,proto3" json:"nextSlot,omitempty"`                 // slot to assign next
	MaxAcceptedSlot  uint64                 `protobuf:"varint,4,opt,name=maxAcceptedSlot,proto3" json:"maxAcceptedSlot,omitempty"`   // highest slot with an accepted value
	MaxCommittedSlot uint64                 `protobuf:"varint,5,opt,name=maxCommittedSlot,proto3" json:"maxCommittedSlot,omitempty"` // highest slot marked committed
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OwnershipTracking) Reset() {
	*x = OwnershipTracking{}
	mi := &file_consensus_consensus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnershipTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnershipTracking) ProtoMessage() {}

func (x *OwnershipTracking) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnershipTracking.ProtoReflect.Descriptor instead.
func (*OwnershipTracking) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{20}
}

func (x *OwnershipTracking) GetPromised() *Ballot {
	if x != nil {
		return x.Promised
	}
	return nil
}

func (x *OwnershipTracking) GetOwned() bool {
	if x != nil {
		return x.Owned
	}
	return false
}

func (x *OwnershipTracking) GetNextSlot() uint64 {
	if x != nil {
		return x.NextSlot
	}
	return 0
}

func (x *OwnershipTracking) GetMaxAcceptedSlot() uint64 {
	if x != nil {
		return x.MaxAcceptedSlot
	}
	return 0
}

func (x *OwnershipTracking) GetMaxCommittedSlot() uint64 {
	if x != nil {
		return x.MaxCommittedSlot
	}
	return 0
}

// message MigrationVersion {
// int64 tableVersion = 1; // The version of the table
// int64 migrationVersion = 2; // The version of the migration
// int64 nodeId = 3; // The ID of the node
// string tableName = 4; // The name of the table
// }
//
// message GossipMigration {
// Migration migrationRequest = 1; // The migration to be gossiped
// Table table = 2; // The table the migration is for
// MigrationVersion previousMigration = 3; // The previous migration
// int64 ttl = 4; // The time to live of the gossip
// Node sender = 5; // The node sending the gossip
// }
//
// message JoinClusterResponse {
// bool success = 1; // Whether the operation was successful
// Table table = 2; // The current node table if the requested node is not the owner
// int64 nodeId = 3; // The ID of the newly joined node
// }
//
// message SchemaMigration {
// repeated string commands = 1; // The commands to be executed
// }
//
// message ACL {
// ACLData owners = 1;
// ACLData readers = 2;
// ACLData writers = 3;
// }
//
// message DataReference {
// bytes key = 1;
// bytes checksum = 2;
// }
//
// message Record {
// oneof data {
// RawData value = 1;
// DataReference ref = 3;
// }
// ACL accessControl = 2;
// }
//
// message RawData {
// bytes data = 1;
// }
//
// message SetChange {
// bytes key = 1;
// Record data = 2;
// }
//
// message AclChange {
// bytes key = 1;
// oneof change {
// ACL addition = 2;
// ACL deletion = 3;
// }
// }
//
// message DelChange {
// bytes key = 1;
// }
//
// message KVChange {
// oneof operation {
// SetChange set = 1;
// DelChange del = 2;
// RawData data = 3;
// AclChange acl = 4;
// }
// }
//
// message DataMigration {
// google.protobuf.Timestamp time = 3;
// oneof session {
// KVChange change = 2;
// }
// }
//
// message NilMigration {}
//
// message Migration {
// MigrationVersion version = 1; // The version of the migration
// oneof migration {
// SchemaMigration schema = 2; // The schema migration
// DataMigration data = 3; // The data migration
// NilMigration none = 4; // Represents a read
// }
// }
//
// message WriteMigrationRequest {
// Node sender = 1; // The node sending the migration
// Migration migration = 2; // The migration to be written
// }
//
// message WriteMigrationResponse {
// bool success = 1; // Whether the operation was successful
// Table table = 2; // The table if the operation was not successful
// }
//
// enum ReplicationLevel {
// global = 0; // Replicate the table globally
// regional = 1; // Replicate the table within the region
// local = 2; // Replicate the table within the node
// }
//
// enum TableType {
// table = 0; // The table is a regular table
// group = 1; // The table is a group meta table
// trigger = 2; // The table is a trigger
// view = 3; // The table is a view
// sharded = 4; // The table is sharded
// }
//
// message Principal {
// string name = 1; // The name of the principal
// string value = 2; // The value of the principal
// }
//
// message Shard {
// Table table = 1; // The table the shard belongs to
// Table shard = 2; // The shard table
// repeated Principal principals = 3; // The principals the shard is sharded by
// }
//
// message Table {
// string name = 1; // The name of the table
// ReplicationLevel replicationLevel = 2; // The replication level of the table
// Node owner = 3; // The global owner of the table
// google.protobuf.Timestamp createdAt = 4; // The time the table was created
// int64 version = 5; // The version of the table
// repeated string allowedRegions = 6; // The regions the table data can be replicated to
// repeated string restrictedRegions = 7; // The regions the table data cannot be replicated to
// string group = 9; // The group the table belongs to
// TableType type = 10; // The type of the table
// repeated string shardPrincipals = 11; // The principals the table is sharded by
// }
//
// message TableGroup {
// Table details = 1; // The details of the group
// repeated Table tables = 2; // The tables in the group
// }
//
// message StealTableOwnershipFailure {
// Table table = 1; // The table that was not stolen
// }
//
// message StealTableOwnershipSuccess {
// Table table = 1; // The table that was stolen
// repeated Migration missingMigrations = 2; // The missing migrations, if any
// }
//
// enum StealReason {
// queryReason = 0; // The table was stolen due to a readonly
// writeReason = 1; // The table was stolen due to a write
// discoveryReason = 2; // We only care about this for discovery
// }
//
// message StealTableOwnershipRequest {
// Node sender = 1; // The node sending the request
// StealReason reason = 4; // The reason the table was stolen
// Table table = 2; // The table to be stolen
// }
//
// message StealTableOwnershipResponse {
// bool promised = 1; // Whether the operation was successful
// oneof response {
// StealTableOwnershipFailure failure = 2; // The table that was not stolen
// StealTableOwnershipSuccess success = 3; // The table that was stolen
// }
// }
type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          // The ID of the node
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // The address of the node
	Region        *Region                `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`   // The region the node is in
	Port          int64                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`      // The port the node listens on
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`  // Whether the node is active
	Rtt           *durationpb.Duration   `protobuf:"bytes,6,opt,name=rtt,proto3" json:"rtt,omitempty"`         // The round trip time to the node
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_consensus_consensus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{21}
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Node) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Node) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Node) GetRtt() *durationpb.Duration {
	if x != nil {
		return x.Rtt
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // The region name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Region) Reset() {
	*x = Region{}
	mi := &file_consensus_consensus_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{22}
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Remote read messages for leader-based reads
type ReadKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"` // The node requesting the read
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`       // The key to read
	Table         string                 `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`   // The table the key belongs to
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadKeyRequest) Reset() {
	*x = ReadKeyRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadKeyRequest) ProtoMessage() {}

func (x *ReadKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadKeyRequest.ProtoReflect.Descriptor instead.
func (*ReadKeyRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{23}
}

func (x *ReadKeyRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *ReadKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReadKeyRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type ReadKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the read was successful
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`      // The value if found, empty if not found
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`      // Error message if not successful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadKeyResponse) Reset() {
	*x = ReadKeyResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadKeyResponse) ProtoMessage() {}

func (x *ReadKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadKeyResponse.ProtoReflect.Descriptor instead.
func (*ReadKeyResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{24}
}

func (x *ReadKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReadKeyResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReadKeyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Remote prefix scan
type PrefixScanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TablePrefix   string                 `protobuf:"bytes,2,opt,name=tablePrefix,proto3" json:"tablePrefix,omitempty"`
	RowPrefix     string                 `protobuf:"bytes,3,opt,name=rowPrefix,proto3" json:"rowPrefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrefixScanRequest) Reset() {
	*x = PrefixScanRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixScanRequest) ProtoMessage() {}

func (x *PrefixScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixScanRequest.ProtoReflect.Descriptor instead.
func (*PrefixScanRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{25}
}

func (x *PrefixScanRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *PrefixScanRequest) GetTablePrefix() string {
	if x != nil {
		return x.TablePrefix
	}
	return ""
}

func (x *PrefixScanRequest) GetRowPrefix() string {
	if x != nil {
		return x.RowPrefix
	}
	return ""
}

type PrefixScanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrefixScanResponse) Reset() {
	*x = PrefixScanResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixScanResponse) ProtoMessage() {}

func (x *PrefixScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixScanResponse.ProtoReflect.Descriptor instead.
func (*PrefixScanResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{26}
}

func (x *PrefixScanResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PrefixScanResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PrefixScanResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type WriteKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *Node                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"` // The node requesting the write
	Table         string                 `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`   // The table the key belongs to
	Record        *Record                `protobuf:"bytes,4,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteKeyRequest) Reset() {
	*x = WriteKeyRequest{}
	mi := &file_consensus_consensus_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteKeyRequest) ProtoMessage() {}

func (x *WriteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteKeyRequest.ProtoReflect.Descriptor instead.
func (*WriteKeyRequest) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{27}
}

func (x *WriteKeyRequest) GetSender() *Node {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *WriteKeyRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *WriteKeyRequest) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type WriteKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the write was successful
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteKeyResponse) Reset() {
	*x = WriteKeyResponse{}
	mi := &file_consensus_consensus_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteKeyResponse) ProtoMessage() {}

func (x *WriteKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_consensus_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteKeyResponse.ProtoReflect.Descriptor instead.
func (*WriteKeyResponse) Descriptor() ([]byte, []int) {
	return file_consensus_consensus_proto_rawDescGZIP(), []int{28}
}

func (x *WriteKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_consensus_consensus_proto protoreflect.FileDescriptor

const file_consensus_consensus_proto_rawDesc = "" +
	"\n" +
	"\x19consensus/consensus.proto\x12\x0fatlas.consensus\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\"?\n" +
	"\x12ReplicationRequest\x12)\n" +
	"\x04data\x18\x01 \x01(\v2\x15.atlas.consensus.DataR\x04data\"3\n" +
	"\x13ReplicationResponse\x12\x1c\n" +
	"\tcommitted\x18\x01 \x01(\bR\tcommitted\"R\n" +
	"\x12DereferenceRequest\x12<\n" +
	"\treference\x18\x01 \x01(\v2\x1e.atlas.consensus.DataReferenceR\treference\"@\n" +
	"\x13DereferenceResponse\x12)\n" +
	"\x04data\x18\x01 \x01(\v2\x15.atlas.consensus.DataR\x04data\"m\n" +
	"\vPingRequest\x12$\n" +
	"\x0esender_node_id\x18\x01 \x01(\x03R\fsenderNodeId\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\x8e\x01\n" +
	"\fPingResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12*\n" +
	"\x11responder_node_id\x18\x02 \x01(\x03R\x0fresponderNodeId\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"<\n" +
	"\x04Slot\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\x04R\x02id\x12\x12\n" +
	"\x04node\x18\x03 \x01(\x04R\x04node\">\n" +
	"\x06Ballot\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\x04R\x02id\x12\x12\n" +
	"\x04node\x18\x03 \x01(\x04R\x04node\"5\n" +
	"\tPrincipal\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"D\n" +
	"\x04Data\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x12\x14\n" +
	"\x05chunk\x18\x03 \x01(\x04R\x05chunk\")\n" +
	"\rDataReference\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\"\n" +
	"\n" +
	"\bDeletion\"\x06\n" +
	"\x04Noop\"\xa5\x01\n" +
	"\x03Acl\x122\n" +
	"\x06owners\x18\x01 \x03(\v2\x1a.atlas.consensus.PrincipalR\x06owners\x124\n" +
	"\areaders\x18\x02 \x03(\v2\x1a.atlas.consensus.PrincipalR\areaders\x124\n" +
	"\awriters\x18\x03 \x03(\v2\x1a.atlas.consensus.PrincipalR\awriters\"\xb6\x03\n" +
	"\x0eRecordMutation\x12)\n" +
	"\x04slot\x18\x01 \x01(\v2\x15.atlas.consensus.SlotR\x04slot\x12/\n" +
	"\x06ballot\x18\b \x01(\v2\x17.atlas.consensus.BallotR\x06ballot\x12D\n" +
	"\fvalueAddress\x18\x02 \x01(\v2\x1e.atlas.consensus.DataReferenceH\x00R\fvalueAddress\x129\n" +
	"\ttombstone\x18\x03 \x01(\v2\x19.atlas.consensus.DeletionH\x00R\ttombstone\x126\n" +
	"\n" +
	"aclUpdated\x18\x04 \x01(\v2\x14.atlas.consensus.AclH\x00R\n" +
	"aclUpdated\x129\n" +
	"\n" +
	"compaction\x18\x05 \x01(\v2\x17.atlas.consensus.RecordH\x00R\n" +
	"compaction\x12+\n" +
	"\x04noop\x18\x06 \x01(\v2\x15.atlas.consensus.NoopH\x00R\x04noop\x12\x1c\n" +
	"\tcommitted\x18\a \x01(\bR\tcommittedB\t\n" +
	"\amessage\"\x9d\x01\n" +
	"\x06Record\x127\n" +
	"\vderivedFrom\x18\x01 \x01(\v2\x15.atlas.consensus.SlotR\vderivedFrom\x12&\n" +
	"\x03acl\x18\x02 \x01(\v2\x14.atlas.consensus.AclR\x03acl\x122\n" +
	"\x04data\x18\x03 \x01(\v2\x1e.atlas.consensus.DataReferenceR\x04data\"M\n" +
	"\x1aStealTableOwnershipRequest\x12/\n" +
	"\x06ballot\x18\x01 \x01(\v2\x17.atlas.consensus.BallotR\x06ballot\"\x84\x02\n" +
	"\x1bStealTableOwnershipResponse\x12\x1a\n" +
	"\bpromised\x18\x01 \x01(\bR\bpromised\x12G\n" +
	"\x0emissingRecords\x18\x02 \x03(\v2\x1f.atlas.consensus.RecordMutationR\x0emissingRecords\x12=\n" +
	"\rhighestBallot\x18\x03 \x01(\v2\x17.atlas.consensus.BallotR\rhighestBallot\x12A\n" +
	"\vhighestSlot\x18\x04 \x01(\v2\x1f.atlas.consensus.RecordMutationR\vhighestSlot\"P\n" +
	"\x15WriteMigrationRequest\x127\n" +
	"\x06record\x18\x01 \x01(\v2\x1f.atlas.consensus.RecordMutationR\x06record\"4\n" +
	"\x16WriteMigrationResponse\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\bR\baccepted\"\xd0\x01\n" +
	"\x11OwnershipTracking\x123\n" +
	"\bpromised\x18\x01 \x01(\v2\x17.atlas.consensus.BallotR\bpromised\x12\x14\n" +
	"\x05owned\x18\x02 \x01(\bR\x05owned\x12\x1a\n" +
	"\bnextSlot\x18\x03 \x01(\x04R\bnextSlot\x12(\n" +
	"\x0fmaxAcceptedSlot\x18\x04 \x01(\x04R\x0fmaxAcceptedSlot\x12*\n" +
	"\x10maxCommittedSlot\x18\x05 \x01(\x04R\x10maxCommittedSlot\"\xba\x01\n" +
	"\x04Node\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12/\n" +
	"\x06region\x18\x03 \x01(\v2\x17.atlas.consensus.RegionR\x06region\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x03R\x04port\x12\x16\n" +
	"\x06active\x18\x05 \x01(\bR\x06active\x12+\n" +
	"\x03rtt\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x03rtt\"\x1c\n" +
	"\x06Region\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"g\n" +
	"\x0eReadKeyRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\"W\n" +
	"\x0fReadKeyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\x82\x01\n" +
	"\x11PrefixScanRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x12 \n" +
	"\vtablePrefix\x18\x02 \x01(\tR\vtablePrefix\x12\x1c\n" +
	"\trowPrefix\x18\x03 \x01(\tR\trowPrefix\"X\n" +
	"\x12PrefixScanResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x12\n" +
	"\x04keys\x18\x02 \x03(\tR\x04keys\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\x87\x01\n" +
	"\x0fWriteKeyRequest\x12-\n" +
	"\x06sender\x18\x01 \x01(\v2\x15.atlas.consensus.NodeR\x06sender\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\x12/\n" +
	"\x06record\x18\x04 \x01(\v2\x17.atlas.consensus.RecordR\x06record\",\n" +
	"\x10WriteKeyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\x8a\a\n" +
	"\tConsensus\x12r\n" +
	"\x13StealTableOwnership\x12+.atlas.consensus.StealTableOwnershipRequest\x1a,.atlas.consensus.StealTableOwnershipResponse\"\x00\x12c\n" +
	"\x0eWriteMigration\x12&.atlas.consensus.WriteMigrationRequest\x1a'.atlas.consensus.WriteMigrationResponse\"\x00\x12S\n" +
	"\x0fAcceptMigration\x12&.atlas.consensus.WriteMigrationRequest\x1a\x16.google.protobuf.Empty\"\x00\x12Z\n" +
	"\tReplicate\x12#.atlas.consensus.ReplicationRequest\x1a$.atlas.consensus.ReplicationResponse\"\x00(\x01\x12\\\n" +
	"\vDeReference\x12#.atlas.consensus.DereferenceRequest\x1a$.atlas.consensus.DereferenceResponse\"\x000\x01\x12E\n" +
	"\x04Ping\x12\x1c.atlas.consensus.PingRequest\x1a\x1d.atlas.consensus.PingResponse\"\x00\x12N\n" +
	"\aReadKey\x12\x1f.atlas.consensus.ReadKeyRequest\x1a .atlas.consensus.ReadKeyResponse\"\x00\x12Q\n" +
	"\bWriteKey\x12 .atlas.consensus.WriteKeyRequest\x1a!.atlas.consensus.WriteKeyResponse\"\x00\x12R\n" +
	"\tDeleteKey\x12 .atlas.consensus.WriteKeyRequest\x1a!.atlas.consensus.WriteKeyResponse\"\x00\x12W\n" +
	"\n" +
	"PrefixScan\x12\".atlas.consensus.PrefixScanRequest\x1a#.atlas.consensus.PrefixScanResponse\"\x00B\fZ\n" +
	"/consensusb\x06proto3"

var (
	file_consensus_consensus_proto_rawDescOnce sync.Once
	file_consensus_consensus_proto_rawDescData []byte
)

func file_consensus_consensus_proto_rawDescGZIP() []byte {
	file_consensus_consensus_proto_rawDescOnce.Do(func() {
		file_consensus_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_consensus_consensus_proto_rawDesc), len(file_consensus_consensus_proto_rawDesc)))
	})
	return file_consensus_consensus_proto_rawDescData
}

var file_consensus_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_consensus_consensus_proto_goTypes = []any{
	(*ReplicationRequest)(nil),          // 0: atlas.consensus.ReplicationRequest
	(*ReplicationResponse)(nil),         // 1: atlas.consensus.ReplicationResponse
	(*DereferenceRequest)(nil),          // 2: atlas.consensus.DereferenceRequest
	(*DereferenceResponse)(nil),         // 3: atlas.consensus.DereferenceResponse
	(*PingRequest)(nil),                 // 4: atlas.consensus.PingRequest
	(*PingResponse)(nil),                // 5: atlas.consensus.PingResponse
	(*Slot)(nil),                        // 6: atlas.consensus.Slot
	(*Ballot)(nil),                      // 7: atlas.consensus.Ballot
	(*Principal)(nil),                   // 8: atlas.consensus.Principal
	(*Data)(nil),                        // 9: atlas.consensus.Data
	(*DataReference)(nil),               // 10: atlas.consensus.DataReference
	(*Deletion)(nil),                    // 11: atlas.consensus.Deletion
	(*Noop)(nil),                        // 12: atlas.consensus.Noop
	(*Acl)(nil),                         // 13: atlas.consensus.Acl
	(*RecordMutation)(nil),              // 14: atlas.consensus.RecordMutation
	(*Record)(nil),                      // 15: atlas.consensus.Record
	(*StealTableOwnershipRequest)(nil),  // 16: atlas.consensus.StealTableOwnershipRequest
	(*StealTableOwnershipResponse)(nil), // 17: atlas.consensus.StealTableOwnershipResponse
	(*WriteMigrationRequest)(nil),       // 18: atlas.consensus.WriteMigrationRequest
	(*WriteMigrationResponse)(nil),      // 19: atlas.consensus.WriteMigrationResponse
	(*OwnershipTracking)(nil),           // 20: atlas.consensus.OwnershipTracking
	(*Node)(nil),                        // 21: atlas.consensus.Node
	(*Region)(nil),                      // 22: atlas.consensus.Region
	(*ReadKeyRequest)(nil),              // 23: atlas.consensus.ReadKeyRequest
	(*ReadKeyResponse)(nil),             // 24: atlas.consensus.ReadKeyResponse
	(*PrefixScanRequest)(nil),           // 25: atlas.consensus.PrefixScanRequest
	(*PrefixScanResponse)(nil),          // 26: atlas.consensus.PrefixScanResponse
	(*WriteKeyRequest)(nil),             // 27: atlas.consensus.WriteKeyRequest
	(*WriteKeyResponse)(nil),            // 28: atlas.consensus.WriteKeyResponse
	(*timestamppb.Timestamp)(nil),       // 29: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),         // 30: google.protobuf.Duration
	(*emptypb.Empty)(nil),               // 31: google.protobuf.Empty
}
var file_consensus_consensus_proto_depIdxs = []int32{
	9,  // 0: atlas.consensus.ReplicationRequest.data:type_name -> atlas.consensus.Data
	10, // 1: atlas.consensus.DereferenceRequest.reference:type_name -> atlas.consensus.DataReference
	9,  // 2: atlas.consensus.DereferenceResponse.data:type_name -> atlas.consensus.Data
	29, // 3: atlas.consensus.PingRequest.timestamp:type_name -> google.protobuf.Timestamp
	29, // 4: atlas.consensus.PingResponse.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 5: atlas.consensus.Acl.owners:type_name -> atlas.consensus.Principal
	8,  // 6: atlas.consensus.Acl.readers:type_name -> atlas.consensus.Principal
	8,  // 7: atlas.consensus.Acl.writers:type_name -> atlas.consensus.Principal
	6,  // 8: atlas.consensus.RecordMutation.slot:type_name -> atlas.consensus.Slot
	7,  // 9: atlas.consensus.RecordMutation.ballot:type_name -> atlas.consensus.Ballot
	10, // 10: atlas.consensus.RecordMutation.valueAddress:type_name -> atlas.consensus.DataReference
	11, // 11: atlas.consensus.RecordMutation.tombstone:type_name -> atlas.consensus.Deletion
	13, // 12: atlas.consensus.RecordMutation.aclUpdated:type_name -> atlas.consensus.Acl
	15, // 13: atlas.consensus.RecordMutation.compaction:type_name -> atlas.consensus.Record
	12, // 14: atlas.consensus.RecordMutation.noop:type_name -> atlas.consensus.Noop
	6,  // 15: atlas.consensus.Record.derivedFrom:type_name -> atlas.consensus.Slot
	13, // 16: atlas.consensus.Record.acl:type_name -> atlas.consensus.Acl
	10, // 17: atlas.consensus.Record.data:type_name -> atlas.consensus.DataReference
	7,  // 18: atlas.consensus.StealTableOwnershipRequest.ballot:type_name -> atlas.consensus.Ballot
	14, // 19: atlas.consensus.StealTableOwnershipResponse.missingRecords:type_name -> atlas.consensus.RecordMutation
	7,  // 20: atlas.consensus.StealTableOwnershipResponse.highestBallot:type_name -> atlas.consensus.Ballot
	14, // 21: atlas.consensus.StealTableOwnershipResponse.highestSlot:type_name -> atlas.consensus.RecordMutation
	14, // 22: atlas.consensus.WriteMigrationRequest.record:type_name -> atlas.consensus.RecordMutation
	7,  // 23: atlas.consensus.OwnershipTracking.promised:type_name -> atlas.consensus.Ballot
	22, // 24: atlas.consensus.Node.region:type_name -> atlas.consensus.Region
	30, // 25: atlas.consensus.Node.rtt:type_name -> google.protobuf.Duration
	21, // 26: atlas.consensus.ReadKeyRequest.sender:type_name -> atlas.consensus.Node
	21, // 27: atlas.consensus.PrefixScanRequest.sender:type_name -> atlas.consensus.Node
	21, // 28: atlas.consensus.WriteKeyRequest.sender:type_name -> atlas.consensus.Node
	15, // 29: atlas.consensus.WriteKeyRequest.record:type_name -> atlas.consensus.Record
	16, // 30: atlas.consensus.Consensus.StealTableOwnership:input_type -> atlas.consensus.StealTableOwnershipRequest
	18, // 31: atlas.consensus.Consensus.WriteMigration:input_type -> atlas.consensus.WriteMigrationRequest
	18, // 32: atlas.consensus.Consensus.AcceptMigration:input_type -> atlas.consensus.WriteMigrationRequest
	0,  // 33: atlas.consensus.Consensus.Replicate:input_type -> atlas.consensus.ReplicationRequest
	2,  // 34: atlas.consensus.Consensus.DeReference:input_type -> atlas.consensus.DereferenceRequest
	4,  // 35: atlas.consensus.Consensus.Ping:input_type -> atlas.consensus.PingRequest
	23, // 36: atlas.consensus.Consensus.ReadKey:input_type -> atlas.consensus.ReadKeyRequest
	27, // 37: atlas.consensus.Consensus.WriteKey:input_type -> atlas.consensus.WriteKeyRequest
	27, // 38: atlas.consensus.Consensus.DeleteKey:input_type -> atlas.consensus.WriteKeyRequest
	25, // 39: atlas.consensus.Consensus.PrefixScan:input_type -> atlas.consensus.PrefixScanRequest
	17, // 40: atlas.consensus.Consensus.StealTableOwnership:output_type -> atlas.consensus.StealTableOwnershipResponse
	19, // 41: atlas.consensus.Consensus.WriteMigration:output_type -> atlas.consensus.WriteMigrationResponse
	31, // 42: atlas.consensus.Consensus.AcceptMigration:output_type -> google.protobuf.Empty
	1,  // 43: atlas.consensus.Consensus.Replicate:output_type -> atlas.consensus.ReplicationResponse
	3,  // 44: atlas.consensus.Consensus.DeReference:output_type -> atlas.consensus.DereferenceResponse
	5,  // 45: atlas.consensus.Consensus.Ping:output_type -> atlas.consensus.PingResponse
	24, // 46: atlas.consensus.Consensus.ReadKey:output_type -> atlas.consensus.ReadKeyResponse
	28, // 47: atlas.consensus.Consensus.WriteKey:output_type -> atlas.consensus.WriteKeyResponse
	28, // 48: atlas.consensus.Consensus.DeleteKey:output_type -> atlas.consensus.WriteKeyResponse
	26, // 49: atlas.consensus.Consensus.PrefixScan:output_type -> atlas.consensus.PrefixScanResponse
	40, // [40:50] is the sub-list for method output_type
	30, // [30:40] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_consensus_consensus_proto_init() }
func file_consensus_consensus_proto_init() {
	if File_consensus_consensus_proto != nil {
		return
	}
	file_consensus_consensus_proto_msgTypes[14].OneofWrappers = []any{
		(*RecordMutation_ValueAddress)(nil),
		(*RecordMutation_Tombstone)(nil),
		(*RecordMutation_AclUpdated)(nil),
		(*RecordMutation_Compaction)(nil),
		(*RecordMutation_Noop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_consensus_consensus_proto_rawDesc), len(file_consensus_consensus_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consensus_consensus_proto_goTypes,
		DependencyIndexes: file_consensus_consensus_proto_depIdxs,
		MessageInfos:      file_consensus_consensus_proto_msgTypes,
	}.Build()
	File_consensus_consensus_proto = out.File
	file_consensus_consensus_proto_goTypes = nil
	file_consensus_consensus_proto_depIdxs = nil
}
