/*
 * This file is part of Atlas-DB.
 *
 * Atlas-DB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Atlas-DB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Atlas-DB. If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package atlas.consensus;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option go_package = "/consensus";

service Consensus {
  rpc StealTableOwnership(StealTableOwnershipRequest) returns (StealTableOwnershipResponse) {}
  rpc WriteMigration(WriteMigrationRequest) returns (WriteMigrationResponse) {}
  rpc AcceptMigration(WriteMigrationRequest) returns (google.protobuf.Empty) {}
  rpc JoinCluster(Node) returns (JoinClusterResponse) {}
  rpc Gossip(GossipMigration) returns (google.protobuf.Empty) {}
  rpc Ping(PingRequest) returns (PingResponse) {}
  rpc ReadKey(ReadKeyRequest) returns (ReadKeyResponse) {}
  rpc WriteKey(WriteKeyRequest) returns (WriteKeyResponse) {}
  rpc DeleteKey(WriteKeyRequest) returns (WriteKeyResponse) {}
  rpc PrefixScan(PrefixScanRequest) returns (PrefixScanResponse) {}
}

message MigrationVersion {
  int64 tableVersion = 1; // The version of the table
  int64 migrationVersion = 2; // The version of the migration
  int64 nodeId = 3; // The ID of the node
  bytes tableName = 4; // The name of the table
}

message GossipMigration {
  Migration migrationRequest = 1; // The migration to be gossiped
  Table table = 2; // The table the migration is for
  MigrationVersion previousMigration = 3; // The previous migration
  int64 ttl = 4; // The time to live of the gossip
  Node sender = 5; // The node sending the gossip
}

message JoinClusterResponse {
  bool success = 1; // Whether the operation was successful
  Table table = 2; // The current node table if the requested node is not the owner
  int64 nodeId = 3; // The ID of the newly joined node
}

message SchemaMigration {
  repeated string commands = 1; // The commands to be executed
}

message ACL {
  ACLData owners = 1;
  ACLData readers = 2;
  ACLData writers = 3;
}

message DataReference {
  bytes key = 1;
  bytes checksum = 2;
}

message Record {
  oneof data {
    RawData value = 1;
    DataReference ref = 3;
  }
  ACL accessControl = 2;
}

message RawData {
  bytes data = 1;
}

message SetChange {
  bytes key = 1;
  Record data = 2;
}

message AclChange {
  bytes key = 1;
  oneof change {
    ACL addition = 2;
    ACL deletion = 3;
  }
}

message DelChange {
  bytes key = 1;
}

message SubscriptionList {
  repeated Subscribe subscriptions = 1;
  repeated bytes log = 2;
}

message SubscribeOptions {
  bool batch = 1;
  sint32 retryAttempts = 2;
  google.protobuf.Duration retryAfterBase = 3;
  string auth = 4;
}

message Subscribe {
  string url = 1;
  bytes prefix = 2;
  SubscribeOptions options = 3;
}

message Notify {
  bytes key = 2;
  oneof change {
    SetChange set = 3;
    DelChange del = 4;
    AclChange acl = 5;
  }
  string version = 6;
  google.protobuf.Timestamp ts = 7;
}

message KVChange {
  oneof operation {
    SetChange set = 1;
    DelChange del = 2;
    RawData data = 3;
    AclChange acl = 4;
    Subscribe sub = 5;
    Notify notification = 6;
  }
}

message DataMigration {
  google.protobuf.Timestamp time = 3;
  oneof session {
    KVChange change = 2;
  }
}

message NilMigration {}

message Migration {
  MigrationVersion version = 1; // The version of the migration
  oneof migration {
    SchemaMigration schema = 2; // The schema migration
    DataMigration data = 3; // The data migration
    NilMigration none = 4; // Represents a read
  }
}

message WriteMigrationRequest {
  Node sender = 1; // The node sending the migration
  Migration migration = 2; // The migration to be written
}

message WriteMigrationResponse {
  bool success = 1; // Whether the operation was successful
  Table table = 2; // The table if the operation was not successful
}

enum ReplicationLevel {
  global = 0; // Replicate the table globally
  regional = 1; // Replicate the table within the region
  local = 2; // Replicate the table within the node
}

enum TableType {
  table = 0; // The table is a regular table
  group = 1; // The table is a group meta table
  trigger = 2; // The table is a trigger
  view = 3; // The table is a view
  sharded = 4; // The table is sharded
}

message Principal {
  string name = 1; // The name of the principal
  string value = 2; // The value of the principal
}

message Shard {
  Table table = 1; // The table the shard belongs to
  Table shard = 2; // The shard table
  repeated Principal principals = 3; // The principals the shard is sharded by
}

message Table {
  bytes name = 1; // The name of the table
  ReplicationLevel replicationLevel = 2; // The replication level of the table
  Node owner = 3; // The global owner of the table
  google.protobuf.Timestamp createdAt = 4; // The time the table was created
  int64 version = 5; // The version of the table
  repeated string allowedRegions = 6; // The regions the table data can be replicated to
  repeated string restrictedRegions = 7; // The regions the table data cannot be replicated to
  string group = 9; // The group the table belongs to
  TableType type = 10; // The type of the table
  repeated string shardPrincipals = 11; // The principals the table is sharded by
}

message TableGroup {
  Table details = 1; // The details of the group
  repeated Table tables = 2; // The tables in the group
}

message StealTableOwnershipFailure {
  Table table = 1; // The table that was not stolen
}

message StealTableOwnershipSuccess {
  Table table = 1; // The table that was stolen
  repeated Migration missingMigrations = 2; // The missing migrations, if any
}

enum StealReason {
  queryReason = 0; // The table was stolen due to a readonly
  writeReason = 1; // The table was stolen due to a write
  discoveryReason = 2; // We only care about this for discovery
}

message StealTableOwnershipRequest {
  Node sender = 1; // The node sending the request
  StealReason reason = 4; // The reason the table was stolen
  Table table = 2; // The table to be stolen
}

message StealTableOwnershipResponse {
  bool promised = 1; // Whether the operation was successful
  oneof response {
    StealTableOwnershipFailure failure = 2; // The table that was not stolen
    StealTableOwnershipSuccess success = 3; // The table that was stolen
  }
}

message Node {
  int64 id = 1; // The ID of the node
  string address = 2;  // The address of the node
  Region region = 3; // The region the node is in
  int64 port = 4; // The port the node listens on
  bool active = 5; // Whether the node is active
  google.protobuf.Duration rtt = 6; // The round trip time to the node
}

message Region {
  string name = 1; // The region name
}

// Storage message for efficient migration persistence
message StoredMigrationBatch {
  Migration migration = 1; // The complete migration
  bool committed = 2; // Whether this migration batch is committed
  bool gossip = 3; // Whether this migration batch came from gossip
}

// Ping messages for health checks
message PingRequest {
  int64 sender_node_id = 1; // The ID of the node sending the ping
  google.protobuf.Timestamp timestamp = 2; // Timestamp of the ping
}

message PingResponse {
  bool success = 1; // Whether the ping was successful
  int64 responder_node_id = 2; // The ID of the node responding
  google.protobuf.Timestamp timestamp = 3; // Timestamp of the response
}

// Remote read messages for leader-based reads
message ReadKeyRequest {
  Node sender = 1; // The node requesting the read
  bytes key = 2; // The key to read
}

message ReadKeyResponse {
  bool success = 1; // Whether the read was successful
  bytes value = 2; // The value if found, empty if not found
  string error = 3; // Error message if not successful
}

// Remote prefix scan
message PrefixScanRequest {
  Node sender = 1;
  bytes prefix = 2;
}

message PrefixScanResponse {
  bool success = 1;
  repeated bytes keys = 2;
  string error = 3;
}

message WriteKeyRequest {
  Node sender = 1; // The node requesting the write
  bytes table = 3; // The table the key belongs to
  KVChange value = 4; // The value to write
}

message WriteKeyResponse {
  bool success = 1; // Whether the write was successful
  string error = 2; // Error message if not successful
}

// ACL data structure for protobuf encoding
message ACLData {
  repeated string principals = 1; // List of principals with access to this key
  google.protobuf.Timestamp created_at = 2; // When ACL was created
  google.protobuf.Timestamp updated_at = 3; // When ACL was last modified
}
